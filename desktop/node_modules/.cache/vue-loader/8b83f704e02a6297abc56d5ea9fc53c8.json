{"remainingRequest":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Molin\\Companion\\desktop\\src\\components\\Highlights.vue?vue&type=script&lang=ts&","dependencies":[{"path":"C:\\Users\\Molin\\Companion\\desktop\\src\\components\\Highlights.vue","mtime":1615172805708},{"path":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\babel-loader\\lib\\index.js","mtime":1610329795007},{"path":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\ts-loader\\index.js","mtime":1610329799503},{"path":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610245778946},{"path":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\vue-loader\\lib\\index.js","mtime":1610329801347}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Highlights.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"Highlights.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <h1 style=\"text-align: center; color: white; padding: 20px\">Highlights</h1>\r\n    <hr />\r\n    <div class=\"highlights-container\">\r\n      <div class=\"highlights-list\">\r\n        <!-- for loop to go through video folders -->\r\n        <div v-for=\"folder in videoList.slice().reverse()\" :key=\"folder.date\">\r\n          <div class=\"folder-tab\">\r\n            <h2>{{ folder.date }}</h2>\r\n            <h3>{{ folder.time }}</h3>\r\n            <!-- for loop to go through videos in the folder -->\r\n            <div v-for=\"video in folder.videoList\" :key=\"video.videoAddress\">\r\n              <div class=\"video-button\" @click=\"setVideo(video.videoAddress)\">\r\n                {{ video.highlightType }}<br>\r\n                {{ video.videoStartTime }}<br>\r\n                {{ video.duration }}<br>\r\n                {{ video.highlight }}<br>\r\n                <img\r\n                  class=\"recent-champs\"\r\n                  :src=\"video.thumbnail_url\"\r\n                  alt=\"champion\"\r\n                  height=\"50\"\r\n                  width=\"50\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div>test</div>\r\n      </div>\r\n      <!-- video side -->\r\n      <div class=\"video-side\">\r\n        <!-- used :src to dynamically set video -->\r\n        <video\r\n          height=\"480px\"\r\n          width=\"720px\"\r\n          :src=\"current_Video\"\r\n          controls\r\n          autoplay\r\n        ></video>\r\n\r\n        <div class=\"below-button\">\r\n          <button>Previus</button>\r\n\r\n          <button>Next</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Vue } from \"vue-property-decorator\";\r\nimport Dexie from \"dexie\";\r\n\r\n//this class represents a video inside a folder\r\nclass Video {\r\n  public videoAddress: string;\r\n  public videoStartTime: string;\r\n  public duration: string;\r\n  public highlightType: string;\r\n  public thumbnail_url: string;\r\n}\r\n\r\n//this class represents a folder\r\nclass VideoFolder {\r\n  //if we query match id with riot we can probabyly get matchtype and champion used\r\n  public gameType: string; //regular/aram/practice\r\n  public champion: string; //url of champion img\r\n\r\n  //below is received from database\r\n  public date: string;\r\n  public time: string;\r\n  public videoList: Array<Video> = [];\r\n\r\n  setDate(date: string) {\r\n    this.date = date;\r\n  }\r\n\r\n  setTime(time: string) {\r\n    this.time = time;\r\n  }\r\n\r\n  addVideoToFolder(video: Video) {\r\n    this.videoList.push(video);\r\n  }\r\n}\r\n\r\n@Component\r\nexport default class Highlights extends Vue {\r\n  videoList: Array<VideoFolder> = [];\r\n  current_Video = \"\";\r\n\r\n  setVideo(newVideo: string) {\r\n    this.current_Video = newVideo;\r\n  }\r\n\r\n  async mounted() {\r\n    let self = this;\r\n    let setFirstVideo = false;\r\n    //fetch recent videos\r\n\r\n    //open local database\r\n    var localDB = new Dexie(\"highlightsDB\");\r\n    localDB.version(1).stores({\r\n      matches: \"match_id, match_start_time\",\r\n      videos:\r\n        \"media_url, match_id, thumbnail_url, highlight_start_time, duration, hightType\",\r\n    });\r\n\r\n    //get last 5 most recent games\r\n    const recentGames = await localDB\r\n      .table(\"matches\")\r\n      .orderBy(\"match_start_time\")\r\n      .reverse()\r\n      .limit(5)\r\n      .toArray()\r\n      .catch((e) => console.log(e));\r\n\r\n    //get all other games\r\n    const olderGames = await localDB\r\n      .table(\"matches\")\r\n      .orderBy(\"match_start_time\")\r\n      .reverse()\r\n      .offset(5)\r\n      .toArray()\r\n      .catch((e) => console.log(e));\r\n\r\n    //display results\r\n    console.log(\"array of recent games: \", recentGames);\r\n    console.log(\"array of older games: \", olderGames);\r\n\r\n    //loop through last 5 games and use game id's to pull data\r\n    //@ts-ignore\r\n    for (let index = 0; index < recentGames.length; index++) {\r\n      let match_date = new Date(recentGames[index].match_start_time);\r\n\r\n      //create new match\r\n      let tempFolder = new VideoFolder();\r\n\r\n      //set date and time from the database\r\n      tempFolder.setDate(match_date.toDateString());\r\n      tempFolder.setTime(match_date.toLocaleTimeString());\r\n\r\n      //get all the videos with matching ids\r\n      let videosInMatch = await localDB\r\n        .table(\"videos\")\r\n        .where(\"match_id\")\r\n        .equals(recentGames[index].match_id)\r\n        .toArray()\r\n        .catch((e) => console.log(e));\r\n      console.log(\"Videos Found: \", videosInMatch);\r\n\r\n      //@ts-ignore\r\n      for (let urls = 0; urls < videosInMatch.length; urls++) {\r\n        let tempVideo = new Video();\r\n\r\n        // console.log(\"duration: \", new Date  (videosInMatch[urls].duration).getSeconds()+\"s\");\r\n        // console.log(\"highlight_start_time: \", new Date  (videosInMatch[urls].highlight_start_time).toLocaleTimeString());\r\n        // console.log(\"hightType: \", videosInMatch[urls].hightType.charAt(0).toUpperCase() + videosInMatch[urls].hightType.slice(1)); //make first letter uppercase\r\n        // console.log(\"media_url: \", videosInMatch[urls].media_url);\r\n        // console.log(\"thumbnail_url: \",videosInMatch[urls].thumbnail_url); \r\n        if(!setFirstVideo){\r\n          self.current_Video = videosInMatch[urls].media_url;\r\n          setFirstVideo = true;\r\n        }\r\n        tempVideo.videoAddress = videosInMatch[urls].media_url;\r\n        tempVideo.videoStartTime = new Date  (videosInMatch[urls].highlight_start_time).toLocaleTimeString();\r\n        tempVideo.duration =\r\n          new Date(videosInMatch[urls].duration).getSeconds() + \"s\";\r\n        tempVideo.highlightType =\r\n          videosInMatch[urls].hightType.charAt(0).toUpperCase() +\r\n          videosInMatch[urls].hightType.slice(1); //make first letter uppercase\r\n        tempVideo.thumbnail_url = videosInMatch[urls].thumbnail_url;\r\n\r\n        tempFolder.addVideoToFolder(tempVideo);\r\n      }\r\n\r\n      self.videoList.push(tempFolder);\r\n    }\r\n\r\n\r\n    //after this all the data is being displayed\r\n    //but now we need to delete the older games, so they dont pollute the database\r\n    //loop through older games and use game id's to delete data\r\n    //@ts-ignore\r\n    for (let index = 0; index < olderGames.length; index++) {\r\n\r\n      //get all the videos with matching ids\r\n       let olderVideos = await localDB\r\n        .table(\"videos\")\r\n        .where(\"match_id\")\r\n        .equals(olderGames[index].match_id)\r\n        .toArray()\r\n        .catch((e) => console.log(e));\r\n      console.log(\"Older Videos Found: \", olderVideos);\r\n\r\n      //loop through video adresses in matches\r\n      //@ts-ignore\r\n      for (let urls = 0; urls < olderVideos.length; urls++) {\r\n        //delete actual videos from local disk using overwolf\r\n        //@ts-ignore\r\n        overwolf.media.videos.deleteVideo(olderVideos[urls].media_url);\r\n      }\r\n\r\n      //then remove them from the videos database\r\n      localDB\r\n        .table(\"videos\")\r\n        .where(\"match_id\")\r\n        .equals(recentGames[index].match_id).delete().then( (deleteCount) => {\r\n        console.log(\"Deleted older highlights videos: \", deleteCount);\r\n      }).catch( e=> console.log(e));\r\n    }\r\n\r\n    //get all other games\r\n    await localDB\r\n      .table(\"matches\")\r\n      .orderBy(\"match_start_time\")\r\n      .reverse()\r\n      .offset(5).delete()\r\n      .then( (deleteCount) => {\r\n        console.log(\"Deleted old match data\", deleteCount)\r\n      })\r\n      .catch((e) => console.log(e));\r\n\r\n\r\n  }\r\n\r\n  \r\n\r\n  created() {\r\n    // window resize\r\n    let WindowId;\r\n    //@ts-ignore\r\n    overwolf.windows.getCurrentWindow(function (res) {\r\n      WindowId = res.window.id;\r\n      console.log(\"Window id: \", WindowId);\r\n      let sizeSettings = {\r\n        window_id: WindowId,\r\n        width: 1600,\r\n        height: 800,\r\n        auto_dpi_resize: true, //relevant only for native windows\r\n      };\r\n      //@ts-ignore\r\n      overwolf.windows.changeSize(sizeSettings, (e) => {\r\n        console.log(\"change size callback: \", e);\r\n      });\r\n    });\r\n  }\r\n}\r\n</script>"]}]}