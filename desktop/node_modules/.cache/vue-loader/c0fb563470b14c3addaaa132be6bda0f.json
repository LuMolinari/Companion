{"remainingRequest":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Molin\\Companion\\desktop\\src\\components\\Highlights.vue?vue&type=script&lang=ts&","dependencies":[{"path":"C:\\Users\\Molin\\Companion\\desktop\\src\\components\\Highlights.vue","mtime":1614805708102},{"path":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\babel-loader\\lib\\index.js","mtime":1610329795007},{"path":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\ts-loader\\index.js","mtime":1610329799503},{"path":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610245778946},{"path":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\vue-loader\\lib\\index.js","mtime":1610329801347}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCmltcG9ydCB7IENvbXBvbmVudCwgVnVlIH0gZnJvbSAidnVlLXByb3BlcnR5LWRlY29yYXRvciI7DQovL3RoaXMgY2xhc3MgcmVwcmVzZW50cyBhIHZpZGVvIGluc2lkZSBhIGZvbGRlcg0KY2xhc3MgVmlkZW8gew0KICBwdWJsaWMgdmlkZW9BZGRyZXNzOiBzdHJpbmc7DQogIHB1YmxpYyB2aWRlb1RpbWU6IHN0cmluZzsNCiAgLy92aWRlbyB0eXBlIGNhbiBiZSBhZGRlZCBoZXJlOyBhc3Npc3RzL2tpbGxzL3doYXRldmVyIGlzIGluIHRoZSB2aWQNCn0NCg0KLy90aGlzIGNsYXNzIHJlcHJlc2VudHMgYSBmb2xkZXINCmNsYXNzIFZpZGVvRm9sZGVyIHsNCiAgLy9kYXRlIG1heWJlPyBjYW4gYmUgcGFyc2VkIGZyb20gdGhlIGZvbGRlciBuYW1lIGFuZCBkaXNwbGF5ZWQNCiAgcHVibGljIGZvbGRlclBhdGg6IHN0cmluZzsNCiAgLy9uZWVkIHRvIGJlIGNoYW5nZWQgcHJvYmFibHkNCiAgcHVibGljIGRhdGU6IHN0cmluZzsNCiAgcHVibGljIHRpbWU6IHN0cmluZzsNCiAgcHVibGljIHZpZGVvTGlzdDogQXJyYXk8VmlkZW8+ID0gW107DQoNCiAgY29uc3RydWN0b3IoKSB7DQogICAgdGhpcy5mb2xkZXJQYXRoID0gIiI7DQogIH0NCg0KICBzZXREYXRlKGRhdGU6IHN0cmluZykgew0KICAgIHRoaXMuZGF0ZSA9IGRhdGU7DQogIH0NCg0KICBzZXRUaW1lKHRpbWU6IHN0cmluZykgew0KICAgIHRoaXMudGltZSA9IHRpbWU7DQogIH0NCiAgc2V0Rm9sZGVyKG5hbWU6IHN0cmluZykgew0KICAgIHRoaXMuZm9sZGVyUGF0aCA9IG5hbWU7DQogIH0NCg0KICBhZGRWaWRlb1RvRm9sZGVyKHZpZGVvVVJMOiBzdHJpbmcsIHZpZGVvVGltZTogc3RyaW5nKSB7DQogICAgbGV0IHRlbXBWaWQgPSBuZXcgVmlkZW8oKTsNCiAgICB0ZW1wVmlkLnZpZGVvQWRkcmVzcyA9IHZpZGVvVVJMOw0KICAgIHRlbXBWaWQudmlkZW9UaW1lID0gdmlkZW9UaW1lOw0KICAgIHRoaXMudmlkZW9MaXN0LnB1c2godGVtcFZpZCk7DQogIH0NCn0NCg0KQENvbXBvbmVudA0KZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGlnaGxpZ2h0cyBleHRlbmRzIFZ1ZSB7DQogIHZpZGVvTGlzdDogQXJyYXk8VmlkZW9Gb2xkZXI+ID0gW107DQogIGN1cnJlbnRfVmlkZW8gPSAiIjsNCg0KICBzZXRWaWRlbyhuZXdWaWRlbzogc3RyaW5nKSB7DQogICAgdGhpcy5jdXJyZW50X1ZpZGVvID0gbmV3VmlkZW87DQogIH0NCg0KICBtb3VudGVkKCkgew0KICAgIGxldCBzZWxmID0gdGhpczsNCiAgICAvLyAvL0B0cy1pZ25vcmUNCiAgICAvLyAvL2RlbGV0ZSB2aWRlb3MgaWYgbW9yZSB0aGFuIGEgZ2lnYWJ5dGUNCiAgICAvLyBORUVEIFRPIFJVTiBUSElTIElOIEEgV0FZIElUIEhBUFBFTlMgQkVGT1JFIEdFVFZJREVPUw0KICAgIC8vIG92ZXJ3b2xmLm1lZGlhLnZpZGVvcy5kZWxldGVPbGRWaWRlb3MoMSwgZSA9PiB7DQogICAgLy8gICBjb25zb2xlLmxvZygiZGVsZXRlZCB2aWRlb3MiLCBlKQ0KICAgIC8vIH0pDQogICAgLy9mZXRjaCByZWNlbnQgdmlkZW9zDQoNCiAgICBjb25zb2xlLmxvZygiY3VycmVudCB2aWRlbzogIiwgc2VsZi5jdXJyZW50X1ZpZGVvKTsNCiAgICAvL0B0cy1pZ25vcmUnDQoNCiAgICBvdmVyd29sZi5tZWRpYS52aWRlb3MuZ2V0VmlkZW9zKGZ1bmN0aW9uIChyZXMpIHsNCiAgICAgIGNvbnNvbGUubG9nKCJyZXN1bHQgZnJvbSBHZXQgVmlkb2VzIiwgcmVzKTsNCg0KICAgICAgLy9wYXJzZSBwb3NzaWJsZSB2aWRlb3MNCiAgICAgIC8vaWYgc3VjY2Vzc2Z1bGx5IHJlY2lldmVkDQogICAgICBpZiAocmVzLnN0YXR1cyA9PT0gInN1Y2Nlc3MiKSB7DQogICAgICAgIC8vc3RhcnQgZ2F0aGVyaW5nIHZpZGVvIHVybHMgYnkgbG9vcGluZyB0aHJvdWdoIHRoZW0NCiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJlcy52aWRlb3MubGVuZ3RoOyBpbmRleCsrKSB7DQogICAgICAgICAgY29uc3QgZWxlbWVudCA9IHJlcy52aWRlb3NbaW5kZXhdOw0KDQogICAgICAgICAgLy9nZXQgZm9sZGVyIHBhdGgNCiAgICAgICAgICBsZXQgcGF0aCA9IGVsZW1lbnQuc3Vic3RyaW5nKDAsIDEwMik7DQogICAgICAgICAgbGV0IGRhdGUgPSBuZXcgRGF0ZShlbGVtZW50LnN1YnN0cmluZyg3OCwgODgpKS50b0xvY2FsZURhdGVTdHJpbmcoKTsNCiAgICAgICAgICBsZXQgdGltZSA9IGVsZW1lbnQuc3Vic3RyaW5nKDg5LCA5Nyk7DQoNCiAgICAgICAgICAvLyBtYWtlIGZpc3QgdmlkZW8gdGhlIG1vc3QgcmVjZW50IHZpZGVvDQogICAgICAgICAgaWYoaW5kZXggPT09IHJlcy52aWRlb3MubGVuZ3RoIC0gMSl7DQogICAgICAgICAgICBzZWxmLmN1cnJlbnRfVmlkZW8gPSBlbGVtZW50Ow0KICAgICAgICAgICAgY29uc29sZS5sb2coImFjdHVhbCBjdXJyIHZpZGVvOiAiLCBzZWxmLmN1cnJlbnRfVmlkZW8pOw0KICAgICAgICAgIH0NCiAgICAgICAgICAvL2NoZWNrIGlmIGFycmF5IG9mIGZvbGRlcnMgaXMgZW1wdHkNCiAgICAgICAgICBpZiAoc2VsZi52aWRlb0xpc3QubGVuZ3RoID09PSAwKSB7DQogICAgICAgICAgICAvL2lmIGl0IGlzIGNyZWF0ZSBmaXJzdCBlbGVtZW50DQogICAgICAgICAgICBsZXQgbmV3Rm9sZGVyID0gbmV3IFZpZGVvRm9sZGVyKCk7DQoNCiAgICAgICAgICAgIC8vZ2l2ZSBpdCBhbiBhZGRyZXNzDQogICAgICAgICAgICBuZXdGb2xkZXIuc2V0Rm9sZGVyKHBhdGgpOw0KDQogICAgICAgICAgICAvL2FkZHJlc3MgaXMgdG9vIGxvbmcgc28gaSBhZGRlZCB0aGUgZGF0ZSBhbmQgdGltZQ0KICAgICAgICAgICAgbmV3Rm9sZGVyLnNldERhdGUoZGF0ZSk7DQogICAgICAgICAgICBuZXdGb2xkZXIuc2V0VGltZSh0aW1lKTsNCg0KICAgICAgICAgICAgLy9hZGQgdmlkZW8gdG8gYXJyYXkNCiAgICAgICAgICAgIG5ld0ZvbGRlci5hZGRWaWRlb1RvRm9sZGVyKGVsZW1lbnQsIGVsZW1lbnQuc3Vic3RyaW5nKDEzMSwgMTM2KSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLy9hZGQgZm9sZGVyIHRvIGFycmF5IG9mIGZvbGRlcnMNCiAgICAgICAgICAgIHNlbGYudmlkZW9MaXN0LnB1c2gobmV3Rm9sZGVyKTsNCiAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgLy9pZiBpdHMgbm90IGVtcHR5IHRoZW4gc2VlIGlmIGl0IG1hdGNoZXMgdGhlIGZvbGRlciBwYXRoIG9mIHRoZSBmb2xkZXIgYXQgdGhlIGVuZA0KICAgICAgICAgICAgaWYgKHNlbGYudmlkZW9MaXN0W3NlbGYudmlkZW9MaXN0Lmxlbmd0aCAtIDFdLmZvbGRlclBhdGggPT09IHBhdGgpIHsNCiAgICAgICAgICAgICAgLy9pZiBpdCBkb2VzIG1hdGNoIHRoZW4gYWRkIGl0IHRvIHRoZSBhcnJheSBvZiB2aWRlbyB1cmxzIGZvciB0aGlzIGZvbGRlcg0KICAgICAgICAgICAgICBzZWxmLnZpZGVvTGlzdFtzZWxmLnZpZGVvTGlzdC5sZW5ndGggLSAxXS5hZGRWaWRlb1RvRm9sZGVyKA0KICAgICAgICAgICAgICAgIGVsZW1lbnQsDQogICAgICAgICAgICAgICAgZWxlbWVudC5zdWJzdHJpbmcoMTMxLCAxMzYpDQogICAgICAgICAgICAgICk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAvL2lmIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBmb2xkZXIgcGF0aCB0aGVuIHdlIGhhdmUgYSBuZXcgZm9sZGVyDQogICAgICAgICAgICAgIC8vc28gd2UgY3JlYXRlIGEgbmV3IGZvbGRlciBvYmplY3QsIHdpdGggdGhpcyBuZXcgcGF0aCBhbmQgYWRkIHRoZSB1cmwgdG8gdGhlIGFycmF5DQoNCiAgICAgICAgICAgICAgbGV0IG5ld0ZvbGRlciA9IG5ldyBWaWRlb0ZvbGRlcigpOw0KDQogICAgICAgICAgICAgIC8vZ2l2ZSBpdCBhbiBhZGRyZXNzDQogICAgICAgICAgICAgIG5ld0ZvbGRlci5zZXRGb2xkZXIocGF0aCk7DQogICAgICAgICAgICAgIC8vYWRkcmVzcyBpcyB0b28gbG9uZyBzbyBpIGFkZGVkIHRoZSBkYXRlIGFuZCB0aW1lDQogICAgICAgICAgICAgIG5ld0ZvbGRlci5zZXREYXRlKGRhdGUpOw0KICAgICAgICAgICAgICBuZXdGb2xkZXIuc2V0VGltZSh0aW1lKTsNCiAgICAgICAgICAgICAgLy9hZGQgdmlkZW8gdG8gYXJyYXkNCiAgICAgICAgICAgICAgbmV3Rm9sZGVyLmFkZFZpZGVvVG9Gb2xkZXIoZWxlbWVudCwgZWxlbWVudC5zdWJzdHJpbmcoMTMxLCAxMzYpKTsNCg0KICAgICAgICAgICAgICAvL2FkZCBmb2xkZXIgdG8gYXJyYXkgb2YgZm9sZGVycw0KICAgICAgICAgICAgICBzZWxmLnZpZGVvTGlzdC5wdXNoKG5ld0ZvbGRlcik7DQogICAgICAgICAgICB9DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9IGVsc2Ugew0KICAgICAgICBjb25zb2xlLmxvZygiRXJyb3IgZ2V0dGluZyB2aWRlb3MiKTsNCiAgICAgIH0NCg0KICAgICAgY29uc29sZS5sb2coIlBhcnNlZCBWaWRvZXM6Iiwgc2VsZi52aWRlb0xpc3QpOw0KICAgIH0pOw0KICB9DQoNCiAgY3JlYXRlZCgpIHsNCiAgICAvLyB3aW5kb3cgcmVzaXplDQogICAgbGV0IFdpbmRvd0lkOw0KICAgIC8vQHRzLWlnbm9yZQ0KICAgIG92ZXJ3b2xmLndpbmRvd3MuZ2V0Q3VycmVudFdpbmRvdyhmdW5jdGlvbiAocmVzKSB7DQogICAgICBXaW5kb3dJZCA9IHJlcy53aW5kb3cuaWQ7DQogICAgICBjb25zb2xlLmxvZygiV2luZG93IGlkOiAiLCBXaW5kb3dJZCk7DQogICAgICBsZXQgc2l6ZVNldHRpbmdzID0gew0KICAgICAgICB3aW5kb3dfaWQ6IFdpbmRvd0lkLA0KICAgICAgICB3aWR0aDogMTYwMCwNCiAgICAgICAgaGVpZ2h0OiA4MDAsDQogICAgICAgIGF1dG9fZHBpX3Jlc2l6ZTogdHJ1ZSwgLy9yZWxldmFudCBvbmx5IGZvciBuYXRpdmUgd2luZG93cw0KICAgICAgfTsNCiAgICAgIC8vQHRzLWlnbm9yZQ0KICAgICAgb3ZlcndvbGYud2luZG93cy5jaGFuZ2VTaXplKHNpemVTZXR0aW5ncywgKGUpID0+IHsNCiAgICAgICAgY29uc29sZS5sb2coImNoYW5nZSBzaXplIGNhbGxiYWNrOiAiLCBlKTsNCiAgICAgIH0pOw0KICAgIH0pOw0KICB9DQp9DQo="},{"version":3,"sources":["Highlights.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Highlights.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <h1 style=\"text-align: center; color: white; padding: 20px\">Highlights</h1>\r\n    <hr/>\r\n    <div class=\"highlights-container\">\r\n      <div class=\"highlights-list\">\r\n        <!-- for loop to go through video folders -->\r\n        <div v-for=\"folder in videoList\" :key=\"folder.folderPath\">\r\n          <div class=\"folder-tab\">\r\n            <h2>{{ folder.date }}</h2>\r\n            <h3>{{ folder.time }}</h3>\r\n            <!-- for loop to go through videos in the folder -->\r\n            <div v-for=\"video in folder.videoList\" :key=\"video.videoAddress\">\r\n              <button\r\n                class=\"video-button\"\r\n                @click=\"setVideo(video.videoAddress)\"\r\n              >\r\n                {{ video.videoTime }}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- video side -->\r\n      <div class=\"video-side\">\r\n        <!-- used :src to dynamically set video -->\r\n        <video\r\n          height=\"480px\"\r\n          width=\"720px\"\r\n          :src=\"current_Video\"\r\n          controls\r\n          autoplay\r\n        ></video>\r\n\r\n        <div class=\"below-button\">\r\n          <button>Previus</button>\r\n\r\n          <button>Next</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Vue } from \"vue-property-decorator\";\r\n//this class represents a video inside a folder\r\nclass Video {\r\n  public videoAddress: string;\r\n  public videoTime: string;\r\n  //video type can be added here; assists/kills/whatever is in the vid\r\n}\r\n\r\n//this class represents a folder\r\nclass VideoFolder {\r\n  //date maybe? can be parsed from the folder name and displayed\r\n  public folderPath: string;\r\n  //need to be changed probably\r\n  public date: string;\r\n  public time: string;\r\n  public videoList: Array<Video> = [];\r\n\r\n  constructor() {\r\n    this.folderPath = \"\";\r\n  }\r\n\r\n  setDate(date: string) {\r\n    this.date = date;\r\n  }\r\n\r\n  setTime(time: string) {\r\n    this.time = time;\r\n  }\r\n  setFolder(name: string) {\r\n    this.folderPath = name;\r\n  }\r\n\r\n  addVideoToFolder(videoURL: string, videoTime: string) {\r\n    let tempVid = new Video();\r\n    tempVid.videoAddress = videoURL;\r\n    tempVid.videoTime = videoTime;\r\n    this.videoList.push(tempVid);\r\n  }\r\n}\r\n\r\n@Component\r\nexport default class Highlights extends Vue {\r\n  videoList: Array<VideoFolder> = [];\r\n  current_Video = \"\";\r\n\r\n  setVideo(newVideo: string) {\r\n    this.current_Video = newVideo;\r\n  }\r\n\r\n  mounted() {\r\n    let self = this;\r\n    // //@ts-ignore\r\n    // //delete videos if more than a gigabyte\r\n    // NEED TO RUN THIS IN A WAY IT HAPPENS BEFORE GETVIDEOS\r\n    // overwolf.media.videos.deleteOldVideos(1, e => {\r\n    //   console.log(\"deleted videos\", e)\r\n    // })\r\n    //fetch recent videos\r\n\r\n    console.log(\"current video: \", self.current_Video);\r\n    //@ts-ignore'\r\n\r\n    overwolf.media.videos.getVideos(function (res) {\r\n      console.log(\"result from Get Vidoes\", res);\r\n\r\n      //parse possible videos\r\n      //if successfully recieved\r\n      if (res.status === \"success\") {\r\n        //start gathering video urls by looping through them\r\n        for (let index = 0; index < res.videos.length; index++) {\r\n          const element = res.videos[index];\r\n\r\n          //get folder path\r\n          let path = element.substring(0, 102);\r\n          let date = new Date(element.substring(78, 88)).toLocaleDateString();\r\n          let time = element.substring(89, 97);\r\n\r\n          // make fist video the most recent video\r\n          if(index === res.videos.length - 1){\r\n            self.current_Video = element;\r\n            console.log(\"actual curr video: \", self.current_Video);\r\n          }\r\n          //check if array of folders is empty\r\n          if (self.videoList.length === 0) {\r\n            //if it is create first element\r\n            let newFolder = new VideoFolder();\r\n\r\n            //give it an address\r\n            newFolder.setFolder(path);\r\n\r\n            //address is too long so i added the date and time\r\n            newFolder.setDate(date);\r\n            newFolder.setTime(time);\r\n\r\n            //add video to array\r\n            newFolder.addVideoToFolder(element, element.substring(131, 136));\r\n\r\n            \r\n            //add folder to array of folders\r\n            self.videoList.push(newFolder);\r\n          } else {\r\n            //if its not empty then see if it matches the folder path of the folder at the end\r\n            if (self.videoList[self.videoList.length - 1].folderPath === path) {\r\n              //if it does match then add it to the array of video urls for this folder\r\n              self.videoList[self.videoList.length - 1].addVideoToFolder(\r\n                element,\r\n                element.substring(131, 136)\r\n              );\r\n            } else {\r\n              //if it does not match the folder path then we have a new folder\r\n              //so we create a new folder object, with this new path and add the url to the array\r\n\r\n              let newFolder = new VideoFolder();\r\n\r\n              //give it an address\r\n              newFolder.setFolder(path);\r\n              //address is too long so i added the date and time\r\n              newFolder.setDate(date);\r\n              newFolder.setTime(time);\r\n              //add video to array\r\n              newFolder.addVideoToFolder(element, element.substring(131, 136));\r\n\r\n              //add folder to array of folders\r\n              self.videoList.push(newFolder);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        console.log(\"Error getting videos\");\r\n      }\r\n\r\n      console.log(\"Parsed Vidoes:\", self.videoList);\r\n    });\r\n  }\r\n\r\n  created() {\r\n    // window resize\r\n    let WindowId;\r\n    //@ts-ignore\r\n    overwolf.windows.getCurrentWindow(function (res) {\r\n      WindowId = res.window.id;\r\n      console.log(\"Window id: \", WindowId);\r\n      let sizeSettings = {\r\n        window_id: WindowId,\r\n        width: 1600,\r\n        height: 800,\r\n        auto_dpi_resize: true, //relevant only for native windows\r\n      };\r\n      //@ts-ignore\r\n      overwolf.windows.changeSize(sizeSettings, (e) => {\r\n        console.log(\"change size callback: \", e);\r\n      });\r\n    });\r\n  }\r\n}\r\n</script>"]}]}