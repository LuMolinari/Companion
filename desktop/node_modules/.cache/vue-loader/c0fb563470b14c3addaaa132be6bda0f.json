{"remainingRequest":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Molin\\Companion\\desktop\\src\\components\\Highlights.vue?vue&type=script&lang=ts&","dependencies":[{"path":"C:\\Users\\Molin\\Companion\\desktop\\src\\components\\Highlights.vue","mtime":1614297709884},{"path":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\babel-loader\\lib\\index.js","mtime":1610329795007},{"path":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\ts-loader\\index.js","mtime":1610329799503},{"path":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610245778946},{"path":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\vue-loader\\lib\\index.js","mtime":1610329801347}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KaW1wb3J0IHsgQ29tcG9uZW50LCBWdWUgfSBmcm9tICJ2dWUtcHJvcGVydHktZGVjb3JhdG9yIjsNCg0KLy9hcnJheSBvZiB2aWRlbyBhZGRyZXNzZXMNCmNsYXNzIFZpZGVvRm9sZGVyIHsNCiAgLy9kYXRlIG1heWJlPyBjYW4gYmUgcGFyc2VkIGZyb20gdGhlIGZvbGRlciBuYW1lIGFuZCBkaXNwbGF5ZWQNCiAgcHVibGljIGZvbGRlclBhdGg6IHN0cmluZzsNCiAgcHVibGljIHZpZGVvTGlzdDogQXJyYXk8c3RyaW5nPiA9IFtdOw0KDQogIGNvbnN0cnVjdG9yKCkgew0KICAgIHRoaXMuZm9sZGVyUGF0aCA9ICIiOw0KICB9DQoNCiAgc2V0Rm9sZGVyKG5hbWU6IHN0cmluZykgew0KICAgIHRoaXMuZm9sZGVyUGF0aCA9IG5hbWU7DQogIH0NCg0KICBhZGRWaWRlb1RvRm9sZGVyKHZpZGVvVVJMOiBzdHJpbmcpIHsNCiAgICB0aGlzLnZpZGVvTGlzdC5wdXNoKHZpZGVvVVJMKTsNCiAgfQ0KfQ0KDQpAQ29tcG9uZW50DQpleHBvcnQgZGVmYXVsdCBjbGFzcyBIaWdobGlnaHRzIGV4dGVuZHMgVnVlIHsNCiAgdmlkZW9MaXN0OiBBcnJheTxWaWRlb0ZvbGRlcj4gPSBbXTsNCiAgY3VycmVudF9WaWRlbyA9DQogICAgIm92ZXJ3b2xmOi8vbWVkaWEvdmlkZW9zL0xvTCtDb21wYW5pb24rQXBwL0xlYWd1ZStvZitMZWdlbmRzL0xlYWd1ZStvZitMZWdlbmRzXzAyLTA5LTIwMjFfMjMtMTktNDMtOTU5L0xlYWd1ZStvZitMZWdlbmRzKzAyLTA5LTIwMjErMjMtMjEtNTMtNzkzLm1wNCI7DQoNCiAgbW91bnRlZCgpIHsNCiAgICBsZXQgc2VsZiA9IHRoaXM7DQogICAgLy8gLy9AdHMtaWdub3JlDQogICAgLy8gLy9kZWxldGUgdmlkZW9zIGlmIG1vcmUgdGhhbiBhIGdpZ2FieXRlDQogICAgLy8gTkVFRCBUTyBSVU4gVEhJUyBJTiBBIFdBWSBJVCBIQVBQRU5TIEJFRk9SRSBHRVRWSURFT1MNCiAgICAvLyBvdmVyd29sZi5tZWRpYS52aWRlb3MuZGVsZXRlT2xkVmlkZW9zKDEsIGUgPT4gew0KICAgIC8vICAgY29uc29sZS5sb2coImRlbGV0ZWQgdmlkZW9zIiwgZSkNCiAgICAvLyB9KQ0KICAgIC8vZmV0Y2ggcmVjZW50IHZpZGVvcw0KDQogICAgY29uc29sZS5sb2coImN1cnJlbnQgdmlkZW86ICIsIHNlbGYuY3VycmVudF9WaWRlbyk7DQogICAgLy9AdHMtaWdub3JlJw0KDQogICAgb3ZlcndvbGYubWVkaWEudmlkZW9zLmdldFZpZGVvcyhmdW5jdGlvbiAocmVzKSB7DQogICAgICBjb25zb2xlLmxvZygicmVzdWx0IGZyb20gR2V0IFZpZG9lcyIsIHJlcyk7DQoNCiAgICAgIC8vcGFyc2UgcG9zc2libGUgdmlkZW9zDQogICAgICAvL2lmIHN1Y2Nlc3NmdWxseSByZWNpZXZlZA0KICAgICAgaWYgKHJlcy5zdGF0dXMgPT09ICJzdWNjZXNzIikgew0KICAgICAgICAvL3N0YXJ0IGdhdGhlcmluZyB2aWRlbyB1cmxzIGJ5IGxvb3BpbmcgdGhyb3VnaCB0aGVtDQogICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXMudmlkZW9zLmxlbmd0aDsgaW5kZXgrKykgew0KICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSByZXMudmlkZW9zW2luZGV4XTsNCg0KICAgICAgICAgIC8vZ2V0IGZvbGRlciBwYXRoDQogICAgICAgICAgbGV0IHBhdGggPSBlbGVtZW50LnN1YnN0cmluZygwLCAxMDIpOw0KDQogICAgICAgICAgLy9jaGVjayBpZiBhcnJheSBvZiBmb2xkZXJzIGlzIGVtcHR5DQogICAgICAgICAgaWYgKHNlbGYudmlkZW9MaXN0Lmxlbmd0aCA9PT0gMCkgew0KICAgICAgICAgICAgLy9pZiBpdCBpcyBjcmVhdGUgZmlyc3QgZWxlbWVudA0KICAgICAgICAgICAgbGV0IG5ld0ZvbGRlciA9IG5ldyBWaWRlb0ZvbGRlcigpOw0KDQogICAgICAgICAgICAvL2dpdmUgaXQgYW4gYWRkcmVzcw0KICAgICAgICAgICAgbmV3Rm9sZGVyLnNldEZvbGRlcihwYXRoKTsNCg0KICAgICAgICAgICAgLy9hZGQgdmlkZW8gdG8gYXJyYXkNCiAgICAgICAgICAgIG5ld0ZvbGRlci5hZGRWaWRlb1RvRm9sZGVyKGVsZW1lbnQpOw0KDQogICAgICAgICAgICAvLyBtYWtlIGZpc3QgdmlkZW8gdGhlIG1vc3QgcmVjZW50IHZpZGVvDQogICAgICAgICAgICBzZWxmLmN1cnJlbnRfVmlkZW8gPSBlbGVtZW50Ow0KICAgICAgICAgICAgY29uc29sZS5sb2coImFjdHVhbCBjdXJyIHZpZGVvOiAiLCBzZWxmLmN1cnJlbnRfVmlkZW8pOw0KICAgICAgICAgICAgLy9hZGQgZm9sZGVyIHRvIGFycmF5IG9mIGZvbGRlcnMNCiAgICAgICAgICAgIHNlbGYudmlkZW9MaXN0LnB1c2gobmV3Rm9sZGVyKTsNCiAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgLy9pZiBpdHMgbm90IGVtcHR5IHRoZW4gc2VlIGlmIGl0IG1hdGNoZXMgdGhlIGZvbGRlciBwYXRoIG9mIHRoZSBmb2xkZXIgYXQgdGhlIGVuZA0KICAgICAgICAgICAgaWYgKHNlbGYudmlkZW9MaXN0W3NlbGYudmlkZW9MaXN0Lmxlbmd0aCAtIDFdLmZvbGRlclBhdGggPT09IHBhdGgpIHsNCiAgICAgICAgICAgICAgLy9pZiBpdCBkb2VzIG1hdGNoIHRoZW4gYWRkIGl0IHRvIHRoZSBhcnJheSBvZiB2aWRlbyB1cmxzIGZvciB0aGlzIGZvbGRlcg0KICAgICAgICAgICAgICBzZWxmLnZpZGVvTGlzdFtzZWxmLnZpZGVvTGlzdC5sZW5ndGggLSAxXS5hZGRWaWRlb1RvRm9sZGVyKA0KICAgICAgICAgICAgICAgIGVsZW1lbnQNCiAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgIC8vaWYgaXQgZG9lcyBub3QgbWF0Y2ggdGhlIGZvbGRlciBwYXRoIHRoZW4gd2UgaGF2ZSBhIG5ldyBmb2xkZXINCiAgICAgICAgICAgICAgLy9zbyB3ZSBjcmVhdGUgYSBuZXcgZm9sZGVyIG9iamVjdCwgd2l0aCB0aGlzIG5ldyBwYXRoIGFuZCBhZGQgdGhlIHVybCB0byB0aGUgYXJyYXkNCg0KICAgICAgICAgICAgICBsZXQgbmV3Rm9sZGVyID0gbmV3IFZpZGVvRm9sZGVyKCk7DQoNCiAgICAgICAgICAgICAgLy9naXZlIGl0IGFuIGFkZHJlc3MNCiAgICAgICAgICAgICAgbmV3Rm9sZGVyLnNldEZvbGRlcihwYXRoKTsNCg0KICAgICAgICAgICAgICAvL2FkZCB2aWRlbyB0byBhcnJheQ0KICAgICAgICAgICAgICBuZXdGb2xkZXIuYWRkVmlkZW9Ub0ZvbGRlcihlbGVtZW50KTsNCg0KICAgICAgICAgICAgICAvL2FkZCBmb2xkZXIgdG8gYXJyYXkgb2YgZm9sZGVycw0KICAgICAgICAgICAgICBzZWxmLnZpZGVvTGlzdC5wdXNoKG5ld0ZvbGRlcik7DQogICAgICAgICAgICB9DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9IGVsc2Ugew0KICAgICAgICBjb25zb2xlLmxvZygiRXJyb3IgZ2V0dGluZyB2aWRlb3MiKTsNCiAgICAgIH0NCg0KICAgICAgY29uc29sZS5sb2coIlBhcnNlZCBWaWRvZXM6Iiwgc2VsZi52aWRlb0xpc3QpOw0KICAgIH0pOw0KICB9DQoNCiAgY3JlYXRlZCgpIHsNCiAgICAvLyB3aW5kb3cgcmVzaXplDQogICAgbGV0IFdpbmRvd0lkOw0KICAgIC8vQHRzLWlnbm9yZQ0KICAgIG92ZXJ3b2xmLndpbmRvd3MuZ2V0Q3VycmVudFdpbmRvdyhmdW5jdGlvbiAocmVzKSB7DQogICAgICBXaW5kb3dJZCA9IHJlcy53aW5kb3cuaWQ7DQogICAgICBjb25zb2xlLmxvZygiV2luZG93IGlkOiAiLCBXaW5kb3dJZCk7DQogICAgICBsZXQgc2l6ZVNldHRpbmdzID0gew0KICAgICAgICB3aW5kb3dfaWQ6IFdpbmRvd0lkLA0KICAgICAgICB3aWR0aDogMTYwMCwNCiAgICAgICAgaGVpZ2h0OiA4MDAsDQogICAgICAgIGF1dG9fZHBpX3Jlc2l6ZTogdHJ1ZSwgLy9yZWxldmFudCBvbmx5IGZvciBuYXRpdmUgd2luZG93cw0KICAgICAgfTsNCiAgICAgIC8vQHRzLWlnbm9yZQ0KICAgICAgb3ZlcndvbGYud2luZG93cy5jaGFuZ2VTaXplKHNpemVTZXR0aW5ncywgKGUpID0+IHsNCiAgICAgICAgY29uc29sZS5sb2coImNoYW5nZSBzaXplIGNhbGxiYWNrOiAiLCBlKTsNCiAgICAgIH0pOw0KICAgIH0pOw0KICB9DQp9DQo="},{"version":3,"sources":["Highlights.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"Highlights.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <h1 style=\"text-align: center; color: white; padding: 20px\">Highlights</h1>\r\n    <div class=\"highlights-container\">\r\n      <div class=\"highlights-list\">\r\n        <!-- for loop to go through video folders -->\r\n        <div v-for=\"folder in videoList\" :key=\"folder.folderPath\">\r\n          <h2>Folder : {{ folder.folderPath }}</h2>\r\n          <!-- for loop to go through videos in the folder -->\r\n          <div v-for=\"video in folder.videoList\" :key=\"video\">\r\n            <p>{{ video }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- video side -->\r\n      <div class=\"video-side\">\r\n        <!-- used :src to dynamically set video -->\r\n        <video height=\"480px\" width=\"720px\" :src=\"current_Video\" controls>\r\n          =\r\n        </video>\r\n\r\n        <div class=\"vid-button\">\r\n          <button>Previus</button>\r\n\r\n          <button>Next</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Vue } from \"vue-property-decorator\";\r\n\r\n//array of video addresses\r\nclass VideoFolder {\r\n  //date maybe? can be parsed from the folder name and displayed\r\n  public folderPath: string;\r\n  public videoList: Array<string> = [];\r\n\r\n  constructor() {\r\n    this.folderPath = \"\";\r\n  }\r\n\r\n  setFolder(name: string) {\r\n    this.folderPath = name;\r\n  }\r\n\r\n  addVideoToFolder(videoURL: string) {\r\n    this.videoList.push(videoURL);\r\n  }\r\n}\r\n\r\n@Component\r\nexport default class Highlights extends Vue {\r\n  videoList: Array<VideoFolder> = [];\r\n  current_Video =\r\n    \"overwolf://media/videos/LoL+Companion+App/League+of+Legends/League+of+Legends_02-09-2021_23-19-43-959/League+of+Legends+02-09-2021+23-21-53-793.mp4\";\r\n\r\n  mounted() {\r\n    let self = this;\r\n    // //@ts-ignore\r\n    // //delete videos if more than a gigabyte\r\n    // NEED TO RUN THIS IN A WAY IT HAPPENS BEFORE GETVIDEOS\r\n    // overwolf.media.videos.deleteOldVideos(1, e => {\r\n    //   console.log(\"deleted videos\", e)\r\n    // })\r\n    //fetch recent videos\r\n\r\n    console.log(\"current video: \", self.current_Video);\r\n    //@ts-ignore'\r\n\r\n    overwolf.media.videos.getVideos(function (res) {\r\n      console.log(\"result from Get Vidoes\", res);\r\n\r\n      //parse possible videos\r\n      //if successfully recieved\r\n      if (res.status === \"success\") {\r\n        //start gathering video urls by looping through them\r\n        for (let index = 0; index < res.videos.length; index++) {\r\n          const element = res.videos[index];\r\n\r\n          //get folder path\r\n          let path = element.substring(0, 102);\r\n\r\n          //check if array of folders is empty\r\n          if (self.videoList.length === 0) {\r\n            //if it is create first element\r\n            let newFolder = new VideoFolder();\r\n\r\n            //give it an address\r\n            newFolder.setFolder(path);\r\n\r\n            //add video to array\r\n            newFolder.addVideoToFolder(element);\r\n\r\n            // make fist video the most recent video\r\n            self.current_Video = element;\r\n            console.log(\"actual curr video: \", self.current_Video);\r\n            //add folder to array of folders\r\n            self.videoList.push(newFolder);\r\n          } else {\r\n            //if its not empty then see if it matches the folder path of the folder at the end\r\n            if (self.videoList[self.videoList.length - 1].folderPath === path) {\r\n              //if it does match then add it to the array of video urls for this folder\r\n              self.videoList[self.videoList.length - 1].addVideoToFolder(\r\n                element\r\n              );\r\n            } else {\r\n              //if it does not match the folder path then we have a new folder\r\n              //so we create a new folder object, with this new path and add the url to the array\r\n\r\n              let newFolder = new VideoFolder();\r\n\r\n              //give it an address\r\n              newFolder.setFolder(path);\r\n\r\n              //add video to array\r\n              newFolder.addVideoToFolder(element);\r\n\r\n              //add folder to array of folders\r\n              self.videoList.push(newFolder);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        console.log(\"Error getting videos\");\r\n      }\r\n\r\n      console.log(\"Parsed Vidoes:\", self.videoList);\r\n    });\r\n  }\r\n\r\n  created() {\r\n    // window resize\r\n    let WindowId;\r\n    //@ts-ignore\r\n    overwolf.windows.getCurrentWindow(function (res) {\r\n      WindowId = res.window.id;\r\n      console.log(\"Window id: \", WindowId);\r\n      let sizeSettings = {\r\n        window_id: WindowId,\r\n        width: 1600,\r\n        height: 800,\r\n        auto_dpi_resize: true, //relevant only for native windows\r\n      };\r\n      //@ts-ignore\r\n      overwolf.windows.changeSize(sizeSettings, (e) => {\r\n        console.log(\"change size callback: \", e);\r\n      });\r\n    });\r\n  }\r\n}\r\n</script>"]}]}