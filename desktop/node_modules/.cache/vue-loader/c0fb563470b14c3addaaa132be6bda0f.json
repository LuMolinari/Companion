{"remainingRequest":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Molin\\Companion\\desktop\\src\\components\\Highlights.vue?vue&type=script&lang=ts&","dependencies":[{"path":"C:\\Users\\Molin\\Companion\\desktop\\src\\components\\Highlights.vue","mtime":1615164970500},{"path":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\babel-loader\\lib\\index.js","mtime":1610329795007},{"path":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\ts-loader\\index.js","mtime":1610329799503},{"path":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610245778946},{"path":"C:\\Users\\Molin\\Companion\\desktop\\node_modules\\vue-loader\\lib\\index.js","mtime":1610329801347}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCmltcG9ydCB7IENvbXBvbmVudCwgVnVlIH0gZnJvbSAidnVlLXByb3BlcnR5LWRlY29yYXRvciI7DQovL3RoaXMgY2xhc3MgcmVwcmVzZW50cyBhIHZpZGVvIGluc2lkZSBhIGZvbGRlcg0KY2xhc3MgVmlkZW8gew0KICBwdWJsaWMgdmlkZW9BZGRyZXNzOiBzdHJpbmc7DQogIHB1YmxpYyB2aWRlb1RpbWU6IHN0cmluZzsNCiAgLy92aWRlbyB0eXBlIGNhbiBiZSBhZGRlZCBoZXJlOyBhc3Npc3RzL2tpbGxzL3doYXRldmVyIGlzIGluIHRoZSB2aWQNCn0NCg0KLy90aGlzIGNsYXNzIHJlcHJlc2VudHMgYSBmb2xkZXINCmNsYXNzIFZpZGVvRm9sZGVyIHsNCiAgLy9kYXRlIG1heWJlPyBjYW4gYmUgcGFyc2VkIGZyb20gdGhlIGZvbGRlciBuYW1lIGFuZCBkaXNwbGF5ZWQNCiAgcHVibGljIGZvbGRlclBhdGg6IHN0cmluZzsNCiAgLy9uZWVkIHRvIGJlIGNoYW5nZWQgcHJvYmFibHkNCiAgcHVibGljIGRhdGU6IHN0cmluZzsNCiAgcHVibGljIHRpbWU6IHN0cmluZzsNCiAgcHVibGljIHZpZGVvTGlzdDogQXJyYXk8VmlkZW8+ID0gW107DQoNCiAgY29uc3RydWN0b3IoKSB7DQogICAgdGhpcy5mb2xkZXJQYXRoID0gIiI7DQogIH0NCg0KICBzZXREYXRlKGRhdGU6IHN0cmluZykgew0KICAgIHRoaXMuZGF0ZSA9IGRhdGU7DQogIH0NCg0KICBzZXRUaW1lKHRpbWU6IHN0cmluZykgew0KICAgIHRoaXMudGltZSA9IHRpbWU7DQogIH0NCiAgc2V0Rm9sZGVyKG5hbWU6IHN0cmluZykgew0KICAgIHRoaXMuZm9sZGVyUGF0aCA9IG5hbWU7DQogIH0NCg0KICBhZGRWaWRlb1RvRm9sZGVyKHZpZGVvVVJMOiBzdHJpbmcsIHZpZGVvVGltZTogc3RyaW5nKSB7DQogICAgbGV0IHRlbXBWaWQgPSBuZXcgVmlkZW8oKTsNCiAgICB0ZW1wVmlkLnZpZGVvQWRkcmVzcyA9IHZpZGVvVVJMOw0KICAgIHRlbXBWaWQudmlkZW9UaW1lID0gdmlkZW9UaW1lOw0KICAgIHRoaXMudmlkZW9MaXN0LnB1c2godGVtcFZpZCk7DQogIH0NCn0NCg0KQENvbXBvbmVudA0KZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGlnaGxpZ2h0cyBleHRlbmRzIFZ1ZSB7DQogIHZpZGVvTGlzdDogQXJyYXk8VmlkZW9Gb2xkZXI+ID0gW107DQogIGN1cnJlbnRfVmlkZW8gPSAiIjsNCg0KICBzZXRWaWRlbyhuZXdWaWRlbzogc3RyaW5nKSB7DQogICAgdGhpcy5jdXJyZW50X1ZpZGVvID0gbmV3VmlkZW87DQogIH0NCg0KICBtb3VudGVkKCkgew0KICAgIGxldCBzZWxmID0gdGhpczsNCiAgIA0KICAgIC8vZmV0Y2ggcmVjZW50IHZpZGVvcw0KdmFyIGxvY2FsREIgPSBuZXcgRGV4aWUoImhpZ2hsaWdodHNEQiIpOw0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCiAgICAvL0B0cy1pZ25vcmUnDQogICAgb3ZlcndvbGYubWVkaWEudmlkZW9zLmdldFZpZGVvcyhmdW5jdGlvbiAocmVzKSB7DQogICAgICBjb25zb2xlLmxvZygicmVzdWx0IGZyb20gR2V0IFZpZG9lcyIsIHJlcyk7DQoNCiAgICAgIC8vcGFyc2UgcG9zc2libGUgdmlkZW9zDQogICAgICAvL2lmIHN1Y2Nlc3NmdWxseSByZWNpZXZlZA0KICAgICAgaWYgKHJlcy5zdGF0dXMgPT09ICJzdWNjZXNzIikgew0KICAgICAgICAvL3N0YXJ0IGdhdGhlcmluZyB2aWRlbyB1cmxzIGJ5IGxvb3BpbmcgdGhyb3VnaCB0aGVtDQogICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXMudmlkZW9zLmxlbmd0aDsgaW5kZXgrKykgew0KICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSByZXMudmlkZW9zW2luZGV4XTsNCg0KICAgICAgICAgIC8vZ2V0IGZvbGRlciBwYXRoDQogICAgICAgICAgbGV0IHBhdGggPSBlbGVtZW50LnN1YnN0cmluZygwLCAxMDIpOw0KICAgICAgICAgIGxldCBkYXRlID0gbmV3IERhdGUoZWxlbWVudC5zdWJzdHJpbmcoNzgsIDg4KSkudG9Mb2NhbGVEYXRlU3RyaW5nKCk7DQogICAgICAgICAgbGV0IHRpbWUgPSBlbGVtZW50LnN1YnN0cmluZyg4OSwgOTcpOw0KICAgICAgICAgIC8vZ2V0IHR5cGUgb2YgaGlnaGxpZ2h0IGZyb20gbG9jYWwgc3RvcmFnZQ0KICAgICAgICAgIGxldCBoaWdobGlnaHRUeXBlID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGVsZW1lbnQpOw0KICAgICAgICAgIA0KICAgICAgICAgIGNvbnNvbGUubG9nKCJGb3VuZCB0eXBlIDogIiwgaGlnaGxpZ2h0VHlwZSk7DQoNCiAgICAgICAgICAvLyBtYWtlIGZpc3QgdmlkZW8gdGhlIG1vc3QgcmVjZW50IHZpZGVvDQogICAgICAgICAgaWYoaW5kZXggPT09IHJlcy52aWRlb3MubGVuZ3RoIC0gMSl7DQogICAgICAgICAgICBzZWxmLmN1cnJlbnRfVmlkZW8gPSBlbGVtZW50Ow0KICAgICAgICAgICAgY29uc29sZS5sb2coImFjdHVhbCBjdXJyIHZpZGVvOiAiLCBzZWxmLmN1cnJlbnRfVmlkZW8pOw0KICAgICAgICAgIH0NCiAgICAgICAgICAvL2NoZWNrIGlmIGFycmF5IG9mIGZvbGRlcnMgaXMgZW1wdHkNCiAgICAgICAgICBpZiAoc2VsZi52aWRlb0xpc3QubGVuZ3RoID09PSAwKSB7DQogICAgICAgICAgICAvL2lmIGl0IGlzIGNyZWF0ZSBmaXJzdCBlbGVtZW50DQogICAgICAgICAgICBsZXQgbmV3Rm9sZGVyID0gbmV3IFZpZGVvRm9sZGVyKCk7DQoNCiAgICAgICAgICAgIC8vZ2l2ZSBpdCBhbiBhZGRyZXNzDQogICAgICAgICAgICBuZXdGb2xkZXIuc2V0Rm9sZGVyKHBhdGgpOw0KDQogICAgICAgICAgICAvL2FkZHJlc3MgaXMgdG9vIGxvbmcgc28gaSBhZGRlZCB0aGUgZGF0ZSBhbmQgdGltZQ0KICAgICAgICAgICAgbmV3Rm9sZGVyLnNldERhdGUoZGF0ZSk7DQogICAgICAgICAgICBuZXdGb2xkZXIuc2V0VGltZSh0aW1lKTsNCg0KICAgICAgICAgICAgLy9hZGQgdmlkZW8gdG8gYXJyYXkNCiAgICAgICAgICAgIG5ld0ZvbGRlci5hZGRWaWRlb1RvRm9sZGVyKGVsZW1lbnQsIGhpZ2hsaWdodFR5cGUpOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIC8vYWRkIGZvbGRlciB0byBhcnJheSBvZiBmb2xkZXJzDQogICAgICAgICAgICBzZWxmLnZpZGVvTGlzdC5wdXNoKG5ld0ZvbGRlcik7DQogICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIC8vaWYgaXRzIG5vdCBlbXB0eSB0aGVuIHNlZSBpZiBpdCBtYXRjaGVzIHRoZSBmb2xkZXIgcGF0aCBvZiB0aGUgZm9sZGVyIGF0IHRoZSBlbmQNCiAgICAgICAgICAgIGlmIChzZWxmLnZpZGVvTGlzdFtzZWxmLnZpZGVvTGlzdC5sZW5ndGggLSAxXS5mb2xkZXJQYXRoID09PSBwYXRoKSB7DQogICAgICAgICAgICAgIC8vaWYgaXQgZG9lcyBtYXRjaCB0aGVuIGFkZCBpdCB0byB0aGUgYXJyYXkgb2YgdmlkZW8gdXJscyBmb3IgdGhpcyBmb2xkZXINCiAgICAgICAgICAgICAgc2VsZi52aWRlb0xpc3Rbc2VsZi52aWRlb0xpc3QubGVuZ3RoIC0gMV0uYWRkVmlkZW9Ub0ZvbGRlcigNCiAgICAgICAgICAgICAgICBlbGVtZW50LA0KICAgICAgICAgICAgICAgIGhpZ2hsaWdodFR5cGUNCiAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgIC8vaWYgaXQgZG9lcyBub3QgbWF0Y2ggdGhlIGZvbGRlciBwYXRoIHRoZW4gd2UgaGF2ZSBhIG5ldyBmb2xkZXINCiAgICAgICAgICAgICAgLy9zbyB3ZSBjcmVhdGUgYSBuZXcgZm9sZGVyIG9iamVjdCwgd2l0aCB0aGlzIG5ldyBwYXRoIGFuZCBhZGQgdGhlIHVybCB0byB0aGUgYXJyYXkNCg0KICAgICAgICAgICAgICBsZXQgbmV3Rm9sZGVyID0gbmV3IFZpZGVvRm9sZGVyKCk7DQoNCiAgICAgICAgICAgICAgLy9naXZlIGl0IGFuIGFkZHJlc3MNCiAgICAgICAgICAgICAgbmV3Rm9sZGVyLnNldEZvbGRlcihwYXRoKTsNCiAgICAgICAgICAgICAgLy9hZGRyZXNzIGlzIHRvbyBsb25nIHNvIGkgYWRkZWQgdGhlIGRhdGUgYW5kIHRpbWUNCiAgICAgICAgICAgICAgbmV3Rm9sZGVyLnNldERhdGUoZGF0ZSk7DQogICAgICAgICAgICAgIG5ld0ZvbGRlci5zZXRUaW1lKHRpbWUpOw0KICAgICAgICAgICAgICAvL2FkZCB2aWRlbyB0byBhcnJheQ0KICAgICAgICAgICAgICBuZXdGb2xkZXIuYWRkVmlkZW9Ub0ZvbGRlcihlbGVtZW50LCBoaWdobGlnaHRUeXBlKTsNCg0KICAgICAgICAgICAgICAvL2FkZCBmb2xkZXIgdG8gYXJyYXkgb2YgZm9sZGVycw0KICAgICAgICAgICAgICBzZWxmLnZpZGVvTGlzdC5wdXNoKG5ld0ZvbGRlcik7DQogICAgICAgICAgICB9DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9IGVsc2Ugew0KICAgICAgICBjb25zb2xlLmxvZygiRXJyb3IgZ2V0dGluZyB2aWRlb3MiKTsNCiAgICAgIH0NCg0KICAgICAgY29uc29sZS5sb2coIlBhcnNlZCBWaWRvZXM6Iiwgc2VsZi52aWRlb0xpc3QpOw0KICAgIH0pOw0KICANCiAgfQ0KDQogIGNyZWF0ZWQoKSB7DQogICAgLy8gd2luZG93IHJlc2l6ZQ0KICAgIGxldCBXaW5kb3dJZDsNCiAgICAvL0B0cy1pZ25vcmUNCiAgICBvdmVyd29sZi53aW5kb3dzLmdldEN1cnJlbnRXaW5kb3coZnVuY3Rpb24gKHJlcykgew0KICAgICAgV2luZG93SWQgPSByZXMud2luZG93LmlkOw0KICAgICAgY29uc29sZS5sb2coIldpbmRvdyBpZDogIiwgV2luZG93SWQpOw0KICAgICAgbGV0IHNpemVTZXR0aW5ncyA9IHsNCiAgICAgICAgd2luZG93X2lkOiBXaW5kb3dJZCwNCiAgICAgICAgd2lkdGg6IDE2MDAsDQogICAgICAgIGhlaWdodDogODAwLA0KICAgICAgICBhdXRvX2RwaV9yZXNpemU6IHRydWUsIC8vcmVsZXZhbnQgb25seSBmb3IgbmF0aXZlIHdpbmRvd3MNCiAgICAgIH07DQogICAgICAvL0B0cy1pZ25vcmUNCiAgICAgIG92ZXJ3b2xmLndpbmRvd3MuY2hhbmdlU2l6ZShzaXplU2V0dGluZ3MsIChlKSA9PiB7DQogICAgICAgIGNvbnNvbGUubG9nKCJjaGFuZ2Ugc2l6ZSBjYWxsYmFjazogIiwgZSk7DQogICAgICB9KTsNCiAgICB9KTsNCiAgfQ0KfQ0K"},{"version":3,"sources":["Highlights.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Highlights.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <h1 style=\"text-align: center; color: white; padding: 20px\">Highlights</h1>\r\n    <hr/>\r\n    <div class=\"highlights-container\">\r\n      <div class=\"highlights-list\">\r\n        <!-- for loop to go through video folders -->\r\n        <div v-for=\"folder in videoList.slice().reverse()\" :key=\"folder.folderPath\">\r\n          <div class=\"folder-tab\">\r\n            <h2>{{ folder.date }}</h2>\r\n            <h3>{{ folder.time }}</h3>\r\n            <!-- for loop to go through videos in the folder -->\r\n            <div v-for=\"video in folder.videoList\" :key=\"video.videoAddress\">\r\n              <button\r\n                class=\"video-button\"\r\n                @click=\"setVideo(video.videoAddress)\"\r\n              >\r\n                {{ video.videoTime }}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- video side -->\r\n      <div class=\"video-side\">\r\n        <!-- used :src to dynamically set video -->\r\n        <video\r\n          height=\"480px\"\r\n          width=\"720px\"\r\n          :src=\"current_Video\"\r\n          controls\r\n          autoplay\r\n        ></video>\r\n\r\n        <div class=\"below-button\">\r\n          <button>Previus</button>\r\n\r\n          <button>Next</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Vue } from \"vue-property-decorator\";\r\n//this class represents a video inside a folder\r\nclass Video {\r\n  public videoAddress: string;\r\n  public videoTime: string;\r\n  //video type can be added here; assists/kills/whatever is in the vid\r\n}\r\n\r\n//this class represents a folder\r\nclass VideoFolder {\r\n  //date maybe? can be parsed from the folder name and displayed\r\n  public folderPath: string;\r\n  //need to be changed probably\r\n  public date: string;\r\n  public time: string;\r\n  public videoList: Array<Video> = [];\r\n\r\n  constructor() {\r\n    this.folderPath = \"\";\r\n  }\r\n\r\n  setDate(date: string) {\r\n    this.date = date;\r\n  }\r\n\r\n  setTime(time: string) {\r\n    this.time = time;\r\n  }\r\n  setFolder(name: string) {\r\n    this.folderPath = name;\r\n  }\r\n\r\n  addVideoToFolder(videoURL: string, videoTime: string) {\r\n    let tempVid = new Video();\r\n    tempVid.videoAddress = videoURL;\r\n    tempVid.videoTime = videoTime;\r\n    this.videoList.push(tempVid);\r\n  }\r\n}\r\n\r\n@Component\r\nexport default class Highlights extends Vue {\r\n  videoList: Array<VideoFolder> = [];\r\n  current_Video = \"\";\r\n\r\n  setVideo(newVideo: string) {\r\n    this.current_Video = newVideo;\r\n  }\r\n\r\n  mounted() {\r\n    let self = this;\r\n   \r\n    //fetch recent videos\r\nvar localDB = new Dexie(\"highlightsDB\");\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //@ts-ignore'\r\n    overwolf.media.videos.getVideos(function (res) {\r\n      console.log(\"result from Get Vidoes\", res);\r\n\r\n      //parse possible videos\r\n      //if successfully recieved\r\n      if (res.status === \"success\") {\r\n        //start gathering video urls by looping through them\r\n        for (let index = 0; index < res.videos.length; index++) {\r\n          const element = res.videos[index];\r\n\r\n          //get folder path\r\n          let path = element.substring(0, 102);\r\n          let date = new Date(element.substring(78, 88)).toLocaleDateString();\r\n          let time = element.substring(89, 97);\r\n          //get type of highlight from local storage\r\n          let highlightType = window.localStorage.getItem(element);\r\n          \r\n          console.log(\"Found type : \", highlightType);\r\n\r\n          // make fist video the most recent video\r\n          if(index === res.videos.length - 1){\r\n            self.current_Video = element;\r\n            console.log(\"actual curr video: \", self.current_Video);\r\n          }\r\n          //check if array of folders is empty\r\n          if (self.videoList.length === 0) {\r\n            //if it is create first element\r\n            let newFolder = new VideoFolder();\r\n\r\n            //give it an address\r\n            newFolder.setFolder(path);\r\n\r\n            //address is too long so i added the date and time\r\n            newFolder.setDate(date);\r\n            newFolder.setTime(time);\r\n\r\n            //add video to array\r\n            newFolder.addVideoToFolder(element, highlightType);\r\n\r\n            \r\n            //add folder to array of folders\r\n            self.videoList.push(newFolder);\r\n          } else {\r\n            //if its not empty then see if it matches the folder path of the folder at the end\r\n            if (self.videoList[self.videoList.length - 1].folderPath === path) {\r\n              //if it does match then add it to the array of video urls for this folder\r\n              self.videoList[self.videoList.length - 1].addVideoToFolder(\r\n                element,\r\n                highlightType\r\n              );\r\n            } else {\r\n              //if it does not match the folder path then we have a new folder\r\n              //so we create a new folder object, with this new path and add the url to the array\r\n\r\n              let newFolder = new VideoFolder();\r\n\r\n              //give it an address\r\n              newFolder.setFolder(path);\r\n              //address is too long so i added the date and time\r\n              newFolder.setDate(date);\r\n              newFolder.setTime(time);\r\n              //add video to array\r\n              newFolder.addVideoToFolder(element, highlightType);\r\n\r\n              //add folder to array of folders\r\n              self.videoList.push(newFolder);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        console.log(\"Error getting videos\");\r\n      }\r\n\r\n      console.log(\"Parsed Vidoes:\", self.videoList);\r\n    });\r\n  \r\n  }\r\n\r\n  created() {\r\n    // window resize\r\n    let WindowId;\r\n    //@ts-ignore\r\n    overwolf.windows.getCurrentWindow(function (res) {\r\n      WindowId = res.window.id;\r\n      console.log(\"Window id: \", WindowId);\r\n      let sizeSettings = {\r\n        window_id: WindowId,\r\n        width: 1600,\r\n        height: 800,\r\n        auto_dpi_resize: true, //relevant only for native windows\r\n      };\r\n      //@ts-ignore\r\n      overwolf.windows.changeSize(sizeSettings, (e) => {\r\n        console.log(\"change size callback: \", e);\r\n      });\r\n    });\r\n  }\r\n}\r\n</script>"]}]}