{"remainingRequest":"C:\\Users\\Luca\\Companion\\CoreApp\\background\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Luca\\Companion\\CoreApp\\background\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Luca\\Companion\\CoreApp\\background\\node_modules\\ts-loader\\index.js??ref--13-3!C:\\Users\\Luca\\Companion\\CoreApp\\shared\\libs\\ow-window.ts","dependencies":[{"path":"C:\\Users\\Luca\\Companion\\CoreApp\\shared\\libs\\ow-window.ts","mtime":1608681494462},{"path":"C:\\Users\\Luca\\Companion\\CoreApp\\background\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1608685446369},{"path":"C:\\Users\\Luca\\Companion\\CoreApp\\background\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1608685447511},{"path":"C:\\Users\\Luca\\Companion\\CoreApp\\background\\node_modules\\babel-loader\\lib\\index.js","mtime":1608685524005},{"path":"C:\\Users\\Luca\\Companion\\CoreApp\\background\\node_modules\\ts-loader\\index.js","mtime":1608685447723}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:\\Users\\Luca\\Companion\\CoreApp\\shared\\libs\\ow-window.ts"],"names":[],"mappings":";;;;;;;AAAA;AAGA,WAAa,QAAb;AAAA;AAAA;AAIE,sBAAsC;AAAA,QAA1B,IAA0B,uEAAJ,IAAI;;AAAA;;AACpC,SAAK,KAAL,GAAa,IAAb;AACA,SAAK,GAAL,GAAW,IAAX;AACD;;AAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUQ,gBAAA,IAVR,GAUe,IAVf;AAAA,kDAYW,IAAI,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAkB,iBAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACjB,IAAI,CAAC,cAAL,EADiB;;AAAA;AAEnB,4BAAA,EAFmB,GAEE,IAAI,CAAC,GAFP;AAGvB,4BAAA,QAAQ,CAAC,OAAT,CAAiB,OAAjB,CAAyB,EAAzB,EAA6B,UAAA,MAAM,EAAG;AACpC,kCAAI,CAAC,MAAM,CAAC,OAAZ,EACE,OAAO,CAAC,KAAR,mDAAyD,EAAzD,sBAAuE,MAAM,CAAC,KAA9E;AACF,8BAAA,OAAO;AACR,6BAJD;;AAHuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAlB;;AAAA;AAAA;AAAA;AAAA,oBAZX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBQ,gBAAA,IAxBR,GAwBe,IAxBf;AAAA,kDA0BW,IAAI,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAkB,kBAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACjB,IAAI,CAAC,cAAL,EADiB;;AAAA;AAEnB,4BAAA,EAFmB,GAEE,IAAI,CAAC,GAFP;AAGvB,4BAAA,QAAQ,CAAC,OAAT,CAAiB,QAAjB,CAA0B,EAA1B,EAA8B,YAAK,CAAI,CAAvC;AAHuB,8DAIhB,OAAO,EAJS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAlB;;AAAA;AAAA;AAAA;AAAA,oBA1BX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCQ,gBAAA,IAnCR,GAmCe,IAnCf;AAAA,kDAqCW,IAAI,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAkB,kBAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACjB,IAAI,CAAC,cAAL,EADiB;;AAAA;AAEnB,4BAAA,EAFmB,GAEE,IAAI,CAAC,GAFP;AAGvB,4BAAA,QAAQ,CAAC,OAAT,CAAiB,QAAjB,CAA0B,EAA1B,EAA8B,YAAK,CAAI,CAAvC;AAHuB,8DAIhB,OAAO,EAJS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAlB;;AAAA;AAAA;AAAA;AAAA,oBArCX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8CQ,gBAAA,IA9CR,GA8Ce,IA9Cf;AAAA,kDAgDW,IAAI,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAkB,kBAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACjB,IAAI,CAAC,cAAL,EADiB;;AAAA;AAEnB,4BAAA,EAFmB,GAEE,IAAI,CAAC,GAFP;AAGvB,4BAAA,QAAQ,CAAC,OAAT,CAAiB,IAAjB,CAAsB,EAAtB,EAA0B,YAAK,CAAI,CAAnC;AAHuB,8DAIhB,OAAO,EAJS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAlB;;AAAA;AAAA;AAAA;AAAA,oBAhDX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAyDQ,gBAAA,IAzDR,GAyDe,IAzDf;AAAA,mDA2DW,IAAI,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAY,kBAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACX,IAAI,CAAC,cAAL,EADW;;AAAA;AAEb,4BAAA,EAFa,GAEQ,IAAI,CAAC,GAFb;AAAA;AAAA,mCAII,KAAI,CAAC,cAAL,EAJJ;;AAAA;AAIX,4BAAA,MAJW;;AAAA,kCAMb,MAAM,CAAC,OAAP,IACD,MAAM,CAAC,YAAP,KAAwB,QAPV;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAQT,KAAI,CAAC,aAAL,EARS;;AAAA;AAAA,8DAWV,OAAO,EAXG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAZ;;AAAA;AAAA;AAAA;AAAA,oBA3DX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,6BA0EkB,IA1ElB,EA0EmC;AAAA;;AAC/B,MAAA,IAAI,CAAC,WAAL,GAAmB,UAAA,CAAC,EAAG;AACrB,QAAA,CAAC,CAAC,cAAF;AACA,QAAA,QAAQ,CAAC,OAAT,CAAiB,QAAjB,CAA0B,MAAI,CAAC,KAA/B;AACD,OAHD;AAID;AA/EH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkFQ,gBAAA,IAlFR,GAkFe,IAlFf;AAAA,mDAoFW,IAAI,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAkC,mBAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACjC,IAAI,CAAC,cAAL,EADiC;;AAAA;AAEnC,4BAAA,EAFmC,GAEd,IAAI,CAAC,GAFS;AAGvC,4BAAA,QAAQ,CAAC,OAAT,CAAiB,cAAjB,CAAgC,EAAhC,EAAoC,OAApC;;AAHuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAlC;;AAAA;AAAA;AAAA;AAAA,oBApFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,6BAmGgB;AAAA;;AACZ,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACrC,YAAM,EAAE,GAAG,SAAL,EAAK,CAAA,GAAG,EAAG;AACf,cAAI,GAAG,IAAI,GAAG,CAAC,MAAJ,KAAe,SAAtB,IAAmC,GAAG,CAAC,MAAvC,IAAiD,GAAG,CAAC,MAAJ,CAAW,EAAhE,EAAoE;AAClE,YAAA,MAAI,CAAC,GAAL,GAAW,GAAG,CAAC,MAAJ,CAAW,EAAtB;;AAEA,gBAAI,CAAC,MAAI,CAAC,KAAV,EAAiB;AACf,cAAA,MAAI,CAAC,KAAL,GAAa,GAAG,CAAC,MAAJ,CAAW,IAAxB;AACD;;AAED,YAAA,OAAO,CAAC,GAAG,CAAC,MAAL,CAAP;AACD,WARD,MAQO;AACL,YAAA,MAAI,CAAC,GAAL,GAAW,IAAX;AACA,YAAA,MAAM;AACP;AACF,SAbD;;AAeA,YAAI,CAAC,MAAI,CAAC,KAAV,EAAiB;AACf,UAAA,QAAQ,CAAC,OAAT,CAAiB,gBAAjB,CAAkC,EAAlC;AACD,SAFD,MAEO;AACL,UAAA,QAAQ,CAAC,OAAT,CAAiB,oBAAjB,CAAsC,MAAI,CAAC,KAA3C,EAAkD,EAAlD;AACD;AACF,OArBM,CAAP;AAsBD;AA1HH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6HQ,gBAAA,IA7HR,GA6He,IA7Hf;AAAA,mDA8HW,IAAI,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAkB,mBAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACjB,IAAI,CAAC,MAAL,EADiB;;AAAA;AAAA,+DAEhB,OAAO,EAFS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAlB;;AAAA;AAAA;AAAA;AAAA,oBA9HX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqIQ,gBAAA,IArIR,GAqIe,IArIf;AAAA,mDAuIW,IAAI,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAkB,mBAAO,OAAP,EAAgB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACjB,IAAI,CAAC,cAAL,EADiB;;AAAA;AAEnB,4BAAA,EAFmB,GAEE,IAAI,CAAC,GAFP;AAIvB,4BAAA,QAAQ,CAAC,OAAT,CAAiB,KAAjB,CAAuB,EAAvB,EAA2B,UAAC,GAAD,EAAa;AAEtC,kCAAI,GAAG,IAAI,GAAG,CAAC,OAAf,EACE,OAAO,GADT,KAGE,MAAM,CAAC,GAAD,CAAN;AACH,6BAND;;AAJuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAlB;;AAAA;AAAA;AAAA;AAAA,oBAvIX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDA4FW,IAAI,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAyC,mBAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAC9C,4BAAA,QAAQ,CAAC,OAAT,CAAiB,gBAAjB,CAAkC,UAAA,MAAM,EAAG;AACzC,8BAAA,OAAO,CAAC,MAAM,CAAC,MAAR,CAAP;AACD,6BAFD;;AAD8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAzC;;AAAA;AAAA;AAAA;AAAA,oBA5FX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["// @ts-nocheck\r\n\r\ntype GetWindowStateResult = overwolf.windows.GetWindowStateResult;\r\nexport class OWWindow {\r\n  private _name: string | null;\r\n  private _id: string | null;\r\n\r\n  constructor(name: string | null = null) {\r\n    this._name = name;\r\n    this._id = null;\r\n  }\r\n\r\n  public async restore(): Promise<void> {\r\n    let that = this;\r\n\r\n    return new Promise<void>(async (resolve) => {\r\n      await that.assureObtained();\r\n      let id: string = <string>that._id;\r\n      overwolf.windows.restore(id, result => {\r\n        if (!result.success)\r\n          console.error(`[restore] - an error occurred, windowId=${id}, reason=${result.error}`);\r\n        resolve();\r\n      });\r\n    })\r\n  }\r\n\r\n  public async minimize(): Promise<void> {\r\n    let that = this;\r\n\r\n    return new Promise<void>(async resolve => {\r\n      await that.assureObtained();\r\n      let id: string = <string>that._id;\r\n      overwolf.windows.minimize(id, () => { });\r\n      return resolve();\r\n    })\r\n  }\r\n\r\n  public async maximize(): Promise<void> {\r\n    let that = this;\r\n\r\n    return new Promise<void>(async resolve => {\r\n      await that.assureObtained();\r\n      let id: string = <string>that._id;\r\n      overwolf.windows.maximize(id, () => { });\r\n      return resolve();\r\n    })\r\n  }\r\n\r\n  public async hide(): Promise<void> {\r\n    let that = this;\r\n\r\n    return new Promise<void>(async resolve => {\r\n      await that.assureObtained();\r\n      let id: string = <string>that._id;\r\n      overwolf.windows.hide(id, () => { });\r\n      return resolve();\r\n    })\r\n  }\r\n\r\n  public async close() {\r\n    let that = this;\r\n\r\n    return new Promise(async resolve => {\r\n      await that.assureObtained();\r\n      let id: string = <string>that._id;\r\n\r\n      const result = await this.getWindowState();\r\n\r\n      if (result.success &&\r\n        (result.window_state !== 'closed')) {\r\n        await this.internalClose();\r\n      }\r\n\r\n      return resolve();\r\n    })\r\n  }\r\n\r\n  public dragMove(elem: HTMLElement) {\r\n    elem.onmousedown = e => {\r\n      e.preventDefault();\r\n      overwolf.windows.dragMove(this._name);\r\n    };\r\n  }\r\n\r\n  public async getWindowState(): Promise<GetWindowStateResult> {\r\n    let that = this;\r\n\r\n    return new Promise<GetWindowStateResult>(async resolve => {\r\n      await that.assureObtained();\r\n      let id: string = <string>that._id;\r\n      overwolf.windows.getWindowState(id, resolve);\r\n    })\r\n  }\r\n\r\n  public static async getCurrentInfo(): Promise<overwolf.windows.WindowInfo> {\r\n    return new Promise<overwolf.windows.WindowInfo>(async resolve => {\r\n      overwolf.windows.getCurrentWindow(result => {\r\n        resolve(result.window);\r\n      })\r\n    })\r\n  }\r\n\r\n  private obtain(): Promise<overwolf.windows.WindowInfo | null> {\r\n    return new Promise((resolve, reject) => {\r\n      const cb = res => {\r\n        if (res && res.status === \"success\" && res.window && res.window.id) {\r\n          this._id = res.window.id;\r\n\r\n          if (!this._name) {\r\n            this._name = res.window.name;\r\n          }\r\n\r\n          resolve(res.window);\r\n        } else {\r\n          this._id = null;\r\n          reject();\r\n        }\r\n      };\r\n\r\n      if (!this._name) {\r\n        overwolf.windows.getCurrentWindow(cb);\r\n      } else {\r\n        overwolf.windows.obtainDeclaredWindow(this._name, cb);\r\n      }\r\n    })\r\n  }\r\n\r\n  private async assureObtained(): Promise<void> {\r\n    let that = this;\r\n    return new Promise<void>(async resolve => {\r\n      await that.obtain();\r\n      return resolve();\r\n    });\r\n  }\r\n\r\n  private async internalClose(): Promise<void> {\r\n    let that = this;\r\n\r\n    return new Promise<void>(async (resolve, reject) => {\r\n      await that.assureObtained();\r\n      let id: string = <string>that._id;\r\n\r\n      overwolf.windows.close(id, (res: any) => {\r\n\r\n        if (res && res.success)\r\n          resolve();\r\n        else\r\n          reject(res);\r\n      });\r\n    })\r\n  }\r\n}\r\n"],"sourceRoot":""}]}