{"remainingRequest":"C:\\Users\\Luca\\Companion\\CoreApp\\background\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Luca\\Companion\\CoreApp\\background\\src\\App.vue?vue&type=script&lang=ts&","dependencies":[{"path":"C:\\Users\\Luca\\Companion\\CoreApp\\background\\src\\App.vue","mtime":1608681494404},{"path":"C:\\Users\\Luca\\Companion\\CoreApp\\background\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1608685446369},{"path":"C:\\Users\\Luca\\Companion\\CoreApp\\background\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1608685447511},{"path":"C:\\Users\\Luca\\Companion\\CoreApp\\background\\node_modules\\babel-loader\\lib\\index.js","mtime":1608685524005},{"path":"C:\\Users\\Luca\\Companion\\CoreApp\\background\\node_modules\\ts-loader\\index.js","mtime":1608685447723},{"path":"C:\\Users\\Luca\\Companion\\CoreApp\\background\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1608685446369},{"path":"C:\\Users\\Luca\\Companion\\CoreApp\\background\\node_modules\\vue-loader\\lib\\index.js","mtime":1608685551757}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCmltcG9ydCB7IENvbXBvbmVudCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7CmltcG9ydCB7IHdpbmRvd05hbWVzLCBmb3J0bml0ZUNsYXNzSWQgfSBmcm9tICIuLi8uLi9zaGFyZWQvY29uc3RhbnRzL2NvbnN0cyI7CmltcG9ydCB7IE9XR2FtZXMgfSBmcm9tICcuLi8uLi9zaGFyZWQvbGlicy9vdy1nYW1lcyc7CmltcG9ydCB7IE9XR2FtZUxpc3RlbmVyIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2xpYnMvb3ctZ2FtZS1saXN0ZW5lcic7CmltcG9ydCB7IE9XV2luZG93IH0gZnJvbSAnLi4vLi4vc2hhcmVkL2xpYnMvb3ctd2luZG93JzsKLy8gQHRzLWlnbm9yZQppbXBvcnQgUnVubmluZ0dhbWVJbmZvID0gb3ZlcndvbGYuZ2FtZXMuUnVubmluZ0dhbWVJbmZvOwovLyBUaGUgYmFja2dyb3VuZCBjb250cm9sbGVyIGhvbGRzIGFsbCBvZiB0aGUgYXBwJ3MgYmFja2dyb3VuZCBsb2dpYyAtIGhlbmNlIGl0cyBuYW1lLiBpdCBoYXMKLy8gbWFueSBwb3NzaWJsZSB1c2UgY2FzZXMsIGZvciBleGFtcGxlIHNoYXJpbmcgZGF0YSBiZXR3ZWVuIHdpbmRvd3MsIG9yLCBpbiBvdXIgY2FzZSwKLy8gbWFuYWdpbmcgd2hpY2ggd2luZG93IGlzIGN1cnJlbnRseSBwcmVzZW50ZWQgdG8gdGhlIHVzZXIuIFRvIHRoYXQgZW5kLCBpdCBob2xkcyBhIGRpY3Rpb25hcnkKLy8gb2YgdGhlIHdpbmRvd3MgYXZhaWxhYmxlIGluIHRoZSBhcHAuCi8vIE91ciBiYWNrZ3JvdW5kIGNvbnRyb2xsZXIgaW1wbGVtZW50cyB0aGUgU2luZ2xldG9uIGRlc2lnbiBwYXR0ZXJuLCBzaW5jZSBvbmx5IG9uZQovLyBpbnN0YW5jZSBvZiBpdCBzaG91bGQgZXhpc3QuCkBDb21wb25lbnQKZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwIGV4dGVuZHMgVnVlIHsKICAgIHByaXZhdGUgX3dpbmRvd3MgPSB7fTsKICAgIHByaXZhdGUgX2dhbWVMaXN0ZW5lcjogT1dHYW1lTGlzdGVuZXI7CgogICAgbW91bnRlZCgpIHsKICAgICAgICB0aGlzLl93aW5kb3dzID0ge307CiAgICAgICAgLy8gUG9wdWxhdGluZyB0aGUgYmFja2dyb3VuZCBjb250cm9sbGVyJ3Mgd2luZG93IGRpY3Rpb25hcnkKICAgICAgICB0aGlzLl93aW5kb3dzW3dpbmRvd05hbWVzLmRlc2t0b3BdID0gbmV3IE9XV2luZG93KHdpbmRvd05hbWVzLmRlc2t0b3ApOwogICAgICAgIHRoaXMuX3dpbmRvd3Nbd2luZG93TmFtZXMuaW5HYW1lXSA9IG5ldyBPV1dpbmRvdyh3aW5kb3dOYW1lcy5pbkdhbWUpOwoKICAgIH07CgogICAgLy8gV2hlbiBydW5uaW5nIHRoZSBhcHAsIHN0YXJ0IGxpc3RlbmluZyB0byBnYW1lcycgc3RhdHVzIGFuZCBkZWNpZGUgd2hpY2ggd2luZG93IHNob3VsZAogICAgLy8gYmUgbGF1bmNoZWQgZmlyc3QsIGJhc2VkIG9uIHdoZXRoZXIgRm9ydG5pdGUgaXMgY3VycmVudGx5IHJ1bm5pbmcKICAgYXN5bmMgY3JlYXRlZCgpIHsKICAgICAgIC8vIFdoZW4gYSBGb3J0bml0ZSBnYW1lIGlzIHN0YXJ0ZWQgb3IgaXMgZW5kZWQsIHRvZ2dsZSB0aGUgYXBwJ3Mgd2luZG93cwogICAgICAgdGhpcy5fZ2FtZUxpc3RlbmVyID0gbmV3IE9XR2FtZUxpc3RlbmVyKHsKICAgICAgICAgICBvbkdhbWVTdGFydGVkOiB0aGlzLnRvZ2dsZVdpbmRvd3MuYmluZCh0aGlzKSwKICAgICAgICAgICBvbkdhbWVFbmRlZDogdGhpcy50b2dnbGVXaW5kb3dzLmJpbmQodGhpcykKICAgICAgIH0pOwogICAgICAgIHRoaXMuX2dhbWVMaXN0ZW5lci5zdGFydCgpOwogICAgICAgIGNvbnN0IGN1cnJXaW5kb3cgPSBhd2FpdCB0aGlzLmlzRm9ydG5pdGVSdW5uaW5nKCkgPyB3aW5kb3dOYW1lcy5pbkdhbWUgOiB3aW5kb3dOYW1lcy5kZXNrdG9wOwogICAgICAgIHRoaXMuX3dpbmRvd3NbY3VycldpbmRvd10ucmVzdG9yZSgpOwogICAgfQoKICAgIHByaXZhdGUgdG9nZ2xlV2luZG93cyhpbmZvKSB7CiAgICAgICAgaWYgKCFpbmZvIHx8ICF0aGlzLmlzR2FtZUZvcnRuaXRlKGluZm8pKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmIChpbmZvLmlzUnVubmluZykgewogICAgICAgICAgICB0aGlzLl93aW5kb3dzW3dpbmRvd05hbWVzLmRlc2t0b3BdLmNsb3NlKCk7CiAgICAgICAgICAgIHRoaXMuX3dpbmRvd3Nbd2luZG93TmFtZXMuaW5HYW1lXS5yZXN0b3JlKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5fd2luZG93c1t3aW5kb3dOYW1lcy5pbkdhbWVdLmNsb3NlKCk7CiAgICAgICAgICAgIHRoaXMuX3dpbmRvd3Nbd2luZG93TmFtZXMuZGVza3RvcF0ucmVzdG9yZSgpOwogICAgICAgIH0KICAgIH0KCiAgICBwcml2YXRlIGFzeW5jIGlzRm9ydG5pdGVSdW5uaW5nKCk6IFByb21pc2U8Ym9vbGVhbj4gewogICAgICAgIGNvbnN0IGluZm8gPSBhd2FpdCBPV0dhbWVzLmdldFJ1bm5pbmdHYW1lSW5mbygpOwoKICAgICAgICByZXR1cm4gaW5mbyAmJiBpbmZvLmlzUnVubmluZyAmJiB0aGlzLmlzR2FtZUZvcnRuaXRlKGluZm8pOwogICAgfQoKICAgIC8vIElkZW50aWZ5IHdoZXRoZXIgdGhlIFJ1bm5pbmdHYW1lSW5mbyBvYmplY3Qgd2UgaGF2ZSByZWZlcmVuY2VzIEZvcnRuaXRlCiAgICBwcml2YXRlIGlzR2FtZUZvcnRuaXRlKGluZm86IFJ1bm5pbmdHYW1lSW5mbykgewogICAgICAgIHJldHVybiBpbmZvLmNsYXNzSWQgPT09IGZvcnRuaXRlQ2xhc3NJZDsKICAgIH0KfQo="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import { Component, Vue } from 'vue-property-decorator';\r\n    import { windowNames, fortniteClassId } from \"../../shared/constants/consts\";\r\n    import { OWGames } from '../../shared/libs/ow-games';\r\n    import { OWGameListener } from '../../shared/libs/ow-game-listener';\r\n    import { OWWindow } from '../../shared/libs/ow-window';\r\n    // @ts-ignore\r\n    import RunningGameInfo = overwolf.games.RunningGameInfo;\r\n    // The background controller holds all of the app's background logic - hence its name. it has\r\n    // many possible use cases, for example sharing data between windows, or, in our case,\r\n    // managing which window is currently presented to the user. To that end, it holds a dictionary\r\n    // of the windows available in the app.\r\n    // Our background controller implements the Singleton design pattern, since only one\r\n    // instance of it should exist.\r\n    @Component\r\n    export default class App extends Vue {\r\n        private _windows = {};\r\n        private _gameListener: OWGameListener;\r\n\r\n        mounted() {\r\n            this._windows = {};\r\n            // Populating the background controller's window dictionary\r\n            this._windows[windowNames.desktop] = new OWWindow(windowNames.desktop);\r\n            this._windows[windowNames.inGame] = new OWWindow(windowNames.inGame);\r\n\r\n        };\r\n\r\n        // When running the app, start listening to games' status and decide which window should\r\n        // be launched first, based on whether Fortnite is currently running\r\n       async created() {\r\n           // When a Fortnite game is started or is ended, toggle the app's windows\r\n           this._gameListener = new OWGameListener({\r\n               onGameStarted: this.toggleWindows.bind(this),\r\n               onGameEnded: this.toggleWindows.bind(this)\r\n           });\r\n            this._gameListener.start();\r\n            const currWindow = await this.isFortniteRunning() ? windowNames.inGame : windowNames.desktop;\r\n            this._windows[currWindow].restore();\r\n        }\r\n\r\n        private toggleWindows(info) {\r\n            if (!info || !this.isGameFortnite(info)) {\r\n                return;\r\n            }\r\n\r\n            if (info.isRunning) {\r\n                this._windows[windowNames.desktop].close();\r\n                this._windows[windowNames.inGame].restore();\r\n            } else {\r\n                this._windows[windowNames.inGame].close();\r\n                this._windows[windowNames.desktop].restore();\r\n            }\r\n        }\r\n\r\n        private async isFortniteRunning(): Promise<boolean> {\r\n            const info = await OWGames.getRunningGameInfo();\r\n\r\n            return info && info.isRunning && this.isGameFortnite(info);\r\n        }\r\n\r\n        // Identify whether the RunningGameInfo object we have references Fortnite\r\n        private isGameFortnite(info: RunningGameInfo) {\r\n            return info.classId === fortniteClassId;\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n</style>\r\n"]}]}