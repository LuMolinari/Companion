{"remainingRequest":"C:\\Users\\Molin\\Companion\\background\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Molin\\Companion\\background\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Molin\\Companion\\background\\node_modules\\ts-loader\\index.js??ref--13-3!C:\\Users\\Molin\\Companion\\background\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Molin\\Companion\\background\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Molin\\Companion\\background\\src\\App.vue?vue&type=script&lang=ts&","dependencies":[{"path":"C:\\Users\\Molin\\Companion\\background\\src\\App.vue","mtime":1611268660860},{"path":"C:\\Users\\Molin\\Companion\\background\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610245778946},{"path":"C:\\Users\\Molin\\Companion\\background\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1610245779138},{"path":"C:\\Users\\Molin\\Companion\\background\\node_modules\\babel-loader\\lib\\index.js","mtime":1610329795007},{"path":"C:\\Users\\Molin\\Companion\\background\\node_modules\\ts-loader\\index.js","mtime":1610329799503},{"path":"C:\\Users\\Molin\\Companion\\background\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610245778946},{"path":"C:\\Users\\Molin\\Companion\\background\\node_modules\\vue-loader\\lib\\index.js","mtime":1610329801347}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiQzovVXNlcnMvTW9saW4vQ29tcGFuaW9uL2JhY2tncm91bmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIkM6L1VzZXJzL01vbGluL0NvbXBhbmlvbi9iYWNrZ3JvdW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiQzovVXNlcnMvTW9saW4vQ29tcGFuaW9uL2JhY2tncm91bmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICJDOi9Vc2Vycy9Nb2xpbi9Db21wYW5pb24vYmFja2dyb3VuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMiOwppbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gIkM6L1VzZXJzL01vbGluL0NvbXBhbmlvbi9iYWNrZ3JvdW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlciI7CmltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tICJ0c2xpYiI7CmltcG9ydCB7IENvbXBvbmVudCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7CmltcG9ydCB7IHdpbmRvd05hbWVzLCBsZWFndWVDbGFzc0lkIH0gZnJvbSAiLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9jb25zdHMiOwppbXBvcnQgeyBPV0dhbWVzIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2xpYnMvb3ctZ2FtZXMnOwppbXBvcnQgeyBPV0dhbWVMaXN0ZW5lciB9IGZyb20gJy4uLy4uL3NoYXJlZC9saWJzL293LWdhbWUtbGlzdGVuZXInOwppbXBvcnQgeyBPV1dpbmRvdyB9IGZyb20gJy4uLy4uL3NoYXJlZC9saWJzL293LXdpbmRvdyc7IC8vIFRoZSBiYWNrZ3JvdW5kIGNvbnRyb2xsZXIgaG9sZHMgYWxsIG9mIHRoZSBhcHAncyBiYWNrZ3JvdW5kIGxvZ2ljIC0gaGVuY2UgaXRzIG5hbWUuIGl0IGhhcwovLyBtYW55IHBvc3NpYmxlIHVzZSBjYXNlcywgZm9yIGV4YW1wbGUgc2hhcmluZyBkYXRhIGJldHdlZW4gd2luZG93cywgb3IsIGluIG91ciBjYXNlLAovLyBtYW5hZ2luZyB3aGljaCB3aW5kb3cgaXMgY3VycmVudGx5IHByZXNlbnRlZCB0byB0aGUgdXNlci4gVG8gdGhhdCBlbmQsIGl0IGhvbGRzIGEgZGljdGlvbmFyeQovLyBvZiB0aGUgd2luZG93cyBhdmFpbGFibGUgaW4gdGhlIGFwcC4KLy8gT3VyIGJhY2tncm91bmQgY29udHJvbGxlciBpbXBsZW1lbnRzIHRoZSBTaW5nbGV0b24gZGVzaWduIHBhdHRlcm4sIHNpbmNlIG9ubHkgb25lCi8vIGluc3RhbmNlIG9mIGl0IHNob3VsZCBleGlzdC4KCnZhciBBcHAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9WdWUpIHsKICBfaW5oZXJpdHMoQXBwLCBfVnVlKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihBcHApOwoKICBmdW5jdGlvbiBBcHAoKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFwcCk7CgogICAgX3RoaXMgPSBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIF90aGlzLl93aW5kb3dzID0ge307CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQXBwLCBbewogICAga2V5OiAibW91bnRlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgICAgdGhpcy5fd2luZG93cyA9IHt9OyAvLyBQb3B1bGF0aW5nIHRoZSBiYWNrZ3JvdW5kIGNvbnRyb2xsZXIncyB3aW5kb3cgZGljdGlvbmFyeQoKICAgICAgdGhpcy5fd2luZG93c1t3aW5kb3dOYW1lcy5kZXNrdG9wXSA9IG5ldyBPV1dpbmRvdyh3aW5kb3dOYW1lcy5kZXNrdG9wKTsKICAgICAgdGhpcy5fd2luZG93c1t3aW5kb3dOYW1lcy5pbkdhbWVdID0gbmV3IE9XV2luZG93KHdpbmRvd05hbWVzLmluR2FtZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY3JlYXRlZCIsCiAgICAvLyBXaGVuIHJ1bm5pbmcgdGhlIGFwcCwgc3RhcnQgbGlzdGVuaW5nIHRvIGdhbWVzJyBzdGF0dXMgYW5kIGRlY2lkZSB3aGljaCB3aW5kb3cgc2hvdWxkCiAgICAvLyBiZSBsYXVuY2hlZCBmaXJzdCwgYmFzZWQgb24gd2hldGhlciBGb3J0bml0ZSBpcyBjdXJyZW50bHkgcnVubmluZwogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9jcmVhdGVkID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBjdXJyV2luZG93OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIC8vIFdoZW4gYSBMZWFndWUgZ2FtZSBpcyBzdGFydGVkIG9yIGlzIGVuZGVkLCB0b2dnbGUgdGhlIGFwcCdzIHdpbmRvd3MKICAgICAgICAgICAgICAgIHRoaXMuX2dhbWVMaXN0ZW5lciA9IG5ldyBPV0dhbWVMaXN0ZW5lcih7CiAgICAgICAgICAgICAgICAgIG9uR2FtZVN0YXJ0ZWQ6IHRoaXMudG9nZ2xlV2luZG93cy5iaW5kKHRoaXMpLAogICAgICAgICAgICAgICAgICBvbkdhbWVFbmRlZDogdGhpcy50b2dnbGVXaW5kb3dzLmJpbmQodGhpcykKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIHRoaXMuX2dhbWVMaXN0ZW5lci5zdGFydCgpOwoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNMZWFndWVSdW5uaW5nKCk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIGlmICghX2NvbnRleHQuc2VudCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSB3aW5kb3dOYW1lcy5pbkdhbWU7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IHdpbmRvd05hbWVzLmRlc2t0b3A7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIGN1cnJXaW5kb3cgPSBfY29udGV4dC50MDsKCiAgICAgICAgICAgICAgICB0aGlzLl93aW5kb3dzW2N1cnJXaW5kb3ddLnJlc3RvcmUoKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgICAgIHJldHVybiBfY3JlYXRlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gY3JlYXRlZDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogInRvZ2dsZVdpbmRvd3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZVdpbmRvd3MoaW5mbykgewogICAgICBpZiAoIWluZm8gfHwgIXRoaXMuaXNHYW1lTGVhZ3VlKGluZm8pKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoaW5mby5pc1J1bm5pbmcpIHsKICAgICAgICB0aGlzLl93aW5kb3dzW3dpbmRvd05hbWVzLmRlc2t0b3BdLmNsb3NlKCk7CgogICAgICAgIHRoaXMuX3dpbmRvd3Nbd2luZG93TmFtZXMuaW5HYW1lXS5yZXN0b3JlKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5fd2luZG93c1t3aW5kb3dOYW1lcy5pbkdhbWVdLmNsb3NlKCk7CgogICAgICAgIHRoaXMuX3dpbmRvd3Nbd2luZG93TmFtZXMuZGVza3RvcF0ucmVzdG9yZSgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNMZWFndWVSdW5uaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfaXNMZWFndWVSdW5uaW5nID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgaW5mbzsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIE9XR2FtZXMuZ2V0UnVubmluZ0dhbWVJbmZvKCk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIGluZm8gPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBpbmZvICYmIGluZm8uaXNSdW5uaW5nICYmIHRoaXMuaXNHYW1lTGVhZ3VlKGluZm8pKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gaXNMZWFndWVSdW5uaW5nKCkgewogICAgICAgIHJldHVybiBfaXNMZWFndWVSdW5uaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBpc0xlYWd1ZVJ1bm5pbmc7CiAgICB9KCkgLy8gSWRlbnRpZnkgd2hldGhlciB0aGUgUnVubmluZ0dhbWVJbmZvIG9iamVjdCB3ZSBoYXZlIHJlZmVyZW5jZXMgRm9ydG5pdGUKCiAgfSwgewogICAga2V5OiAiaXNHYW1lTGVhZ3VlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0dhbWVMZWFndWUoaW5mbykgewogICAgICByZXR1cm4gaW5mby5jbGFzc0lkID09PSBsZWFndWVDbGFzc0lkOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEFwcDsKfShWdWUpOwoKQXBwID0gX19kZWNvcmF0ZShbQ29tcG9uZW50XSwgQXBwKTsKZXhwb3J0IGRlZmF1bHQgQXBwOw=="},{"version":3,"sources":["C:\\Users\\Molin\\Companion\\background\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Molin\\Companion\\background\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Molin\\Companion\\background\\src\\App.vue?vue&type=script&lang=ts&"],"names":[],"mappings":";;;;;;;AAIA,SAAS,SAAT,EAAoB,GAApB,QAA+B,wBAA/B;AACA,SAAS,WAAT,EAAsB,aAAtB,QAA2C,+BAA3C;AACA,SAAS,OAAT,QAAwB,4BAAxB;AACA,SAAS,cAAT,QAA+B,oCAA/B;AACA,SAAS,QAAT,QAAyB,6BAAzB,C,CAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAqB,GAArB;AAAA;;AAAA;;AAAA,iBAAA;AAAA;;AAAA;;;AACY,UAAA,QAAA,GAAW,EAAX;AADZ;AAiDC;;AAjDD;AAAA;AAAA,8BAIW;AACH,WAAK,QAAL,GAAgB,EAAhB,CADG,CAEH;;AACA,WAAK,QAAL,CAAc,WAAW,CAAC,OAA1B,IAAqC,IAAI,QAAJ,CAAa,WAAW,CAAC,OAAzB,CAArC;AACA,WAAK,QAAL,CAAc,WAAW,CAAC,MAA1B,IAAoC,IAAI,QAAJ,CAAa,WAAW,CAAC,MAAzB,CAApC;AAEH;AAVL;AAAA;AAYI;AACA;AAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeO;AACA,qBAAK,aAAL,GAAqB,IAAI,cAAJ,CAAmB;AACpC,kBAAA,aAAa,EAAE,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CADqB;AAEpC,kBAAA,WAAW,EAAE,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB;AAFuB,iBAAnB,CAArB;;AAIC,qBAAK,aAAL,CAAmB,KAAnB;;AApBR;AAAA,uBAqBiC,KAAK,eAAL,EArBjC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,8BAqB0D,WAAW,CAAC,MArBtE;AAAA;AAAA;;AAAA;AAAA,8BAqB+E,WAAW,CAAC,OArB3F;;AAAA;AAqBc,gBAAA,UArBd;;AAsBQ,qBAAK,QAAL,CAAc,UAAd,EAA0B,OAA1B;;AAtBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kCAyB0B,IAzB1B,EAyB8B;AACtB,UAAI,CAAC,IAAD,IAAS,CAAC,KAAK,YAAL,CAAkB,IAAlB,CAAd,EAAuC;AACnC;AACH;;AAED,UAAI,IAAI,CAAC,SAAT,EAAoB;AAChB,aAAK,QAAL,CAAc,WAAW,CAAC,OAA1B,EAAmC,KAAnC;;AACA,aAAK,QAAL,CAAc,WAAW,CAAC,MAA1B,EAAkC,OAAlC;AACH,OAHD,MAGO;AACH,aAAK,QAAL,CAAc,WAAW,CAAC,MAA1B,EAAkC,KAAlC;;AACA,aAAK,QAAL,CAAc,WAAW,CAAC,OAA1B,EAAmC,OAAnC;AACH;AACJ;AArCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAwC2B,OAAO,CAAC,kBAAR,EAxC3B;;AAAA;AAwCc,gBAAA,IAxCd;AAAA,kDA0Ce,IAAI,IAAI,IAAI,CAAC,SAAb,IAA0B,KAAK,YAAL,CAAkB,IAAlB,CA1CzC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,QA6CI;;AA7CJ;AAAA;AAAA,iCA8CyB,IA9CzB,EA8C8C;AACtC,aAAO,IAAI,CAAC,OAAL,KAAiB,aAAxB;AACH;AAhDL;;AAAA;AAAA,EAAiC,GAAjC,CAAA;;AAAqB,GAAG,GAAA,UAAA,CAAA,CADvB,SACuB,CAAA,EAAH,GAAG,CAAH;eAAA,G","sourcesContent":["\n\n\n\nimport { Component, Vue } from 'vue-property-decorator';\nimport { windowNames, leagueClassId } from \"../../shared/constants/consts\";\nimport { OWGames } from '../../shared/libs/ow-games';\nimport { OWGameListener } from '../../shared/libs/ow-game-listener';\nimport { OWWindow } from '../../shared/libs/ow-window';\n// @ts-ignore\nimport RunningGameInfo = overwolf.games.RunningGameInfo;\n// The background controller holds all of the app's background logic - hence its name. it has\n// many possible use cases, for example sharing data between windows, or, in our case,\n// managing which window is currently presented to the user. To that end, it holds a dictionary\n// of the windows available in the app.\n// Our background controller implements the Singleton design pattern, since only one\n// instance of it should exist.\n@Component\nexport default class App extends Vue {\n    private _windows = {};\n    private _gameListener: OWGameListener;\n\n    mounted() {\n        this._windows = {};\n        // Populating the background controller's window dictionary\n        this._windows[windowNames.desktop] = new OWWindow(windowNames.desktop);\n        this._windows[windowNames.inGame] = new OWWindow(windowNames.inGame);\n\n    };\n\n    // When running the app, start listening to games' status and decide which window should\n    // be launched first, based on whether Fortnite is currently running\n   async created() {\n       // When a League game is started or is ended, toggle the app's windows\n       this._gameListener = new OWGameListener({\n           onGameStarted: this.toggleWindows.bind(this),\n           onGameEnded: this.toggleWindows.bind(this)\n       });\n        this._gameListener.start();\n        const currWindow = await this.isLeagueRunning() ? windowNames.inGame : windowNames.desktop;\n        this._windows[currWindow].restore();\n    }\n\n    private toggleWindows(info) {\n        if (!info || !this.isGameLeague(info)) {\n            return;\n        }\n\n        if (info.isRunning) {\n            this._windows[windowNames.desktop].close();\n            this._windows[windowNames.inGame].restore();\n        } else {\n            this._windows[windowNames.inGame].close();\n            this._windows[windowNames.desktop].restore();\n        }\n    }\n\n    private async isLeagueRunning(): Promise<boolean> {\n        const info = await OWGames.getRunningGameInfo();\n\n        return info && info.isRunning && this.isGameLeague(info);\n    }\n\n    // Identify whether the RunningGameInfo object we have references Fortnite\n    private isGameLeague(info: RunningGameInfo) {\n        return info.classId === leagueClassId;\n    }\n}\n"],"sourceRoot":""}]}