{"remainingRequest":"C:\\Users\\Molin\\Companion\\background\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Molin\\Companion\\background\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Molin\\Companion\\background\\node_modules\\ts-loader\\index.js??ref--13-3!C:\\Users\\Molin\\Companion\\background\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Molin\\Companion\\background\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Molin\\Companion\\background\\src\\App.vue?vue&type=script&lang=ts&","dependencies":[{"path":"C:\\Users\\Molin\\Companion\\background\\src\\App.vue","mtime":1610332794259},{"path":"C:\\Users\\Molin\\Companion\\background\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610245778946},{"path":"C:\\Users\\Molin\\Companion\\background\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1610245779138},{"path":"C:\\Users\\Molin\\Companion\\background\\node_modules\\babel-loader\\lib\\index.js","mtime":1610329795007},{"path":"C:\\Users\\Molin\\Companion\\background\\node_modules\\ts-loader\\index.js","mtime":1610329799503},{"path":"C:\\Users\\Molin\\Companion\\background\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610245778946},{"path":"C:\\Users\\Molin\\Companion\\background\\node_modules\\vue-loader\\lib\\index.js","mtime":1610329801347}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiQzovVXNlcnMvTW9saW4vQ29tcGFuaW9uL2JhY2tncm91bmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIkM6L1VzZXJzL01vbGluL0NvbXBhbmlvbi9iYWNrZ3JvdW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiQzovVXNlcnMvTW9saW4vQ29tcGFuaW9uL2JhY2tncm91bmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICJDOi9Vc2Vycy9Nb2xpbi9Db21wYW5pb24vYmFja2dyb3VuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMiOwppbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gIkM6L1VzZXJzL01vbGluL0NvbXBhbmlvbi9iYWNrZ3JvdW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlciI7CmltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tICJ0c2xpYiI7CmltcG9ydCB7IENvbXBvbmVudCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7CmltcG9ydCB7IHdpbmRvd05hbWVzLCBsZWFndWVDbGFzc0lkIH0gZnJvbSAiLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9jb25zdHMiOwppbXBvcnQgeyBPV0dhbWVzIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2xpYnMvb3ctZ2FtZXMnOwppbXBvcnQgeyBPV0dhbWVMaXN0ZW5lciB9IGZyb20gJy4uLy4uL3NoYXJlZC9saWJzL293LWdhbWUtbGlzdGVuZXInOwppbXBvcnQgeyBPV1dpbmRvdyB9IGZyb20gJy4uLy4uL3NoYXJlZC9saWJzL293LXdpbmRvdyc7IC8vIFRoZSBiYWNrZ3JvdW5kIGNvbnRyb2xsZXIgaG9sZHMgYWxsIG9mIHRoZSBhcHAncyBiYWNrZ3JvdW5kIGxvZ2ljIC0gaGVuY2UgaXRzIG5hbWUuIGl0IGhhcwovLyBtYW55IHBvc3NpYmxlIHVzZSBjYXNlcywgZm9yIGV4YW1wbGUgc2hhcmluZyBkYXRhIGJldHdlZW4gd2luZG93cywgb3IsIGluIG91ciBjYXNlLAovLyBtYW5hZ2luZyB3aGljaCB3aW5kb3cgaXMgY3VycmVudGx5IHByZXNlbnRlZCB0byB0aGUgdXNlci4gVG8gdGhhdCBlbmQsIGl0IGhvbGRzIGEgZGljdGlvbmFyeQovLyBvZiB0aGUgd2luZG93cyBhdmFpbGFibGUgaW4gdGhlIGFwcC4KLy8gT3VyIGJhY2tncm91bmQgY29udHJvbGxlciBpbXBsZW1lbnRzIHRoZSBTaW5nbGV0b24gZGVzaWduIHBhdHRlcm4sIHNpbmNlIG9ubHkgb25lCi8vIGluc3RhbmNlIG9mIGl0IHNob3VsZCBleGlzdC4KCnZhciBBcHAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9WdWUpIHsKICBfaW5oZXJpdHMoQXBwLCBfVnVlKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihBcHApOwoKICBmdW5jdGlvbiBBcHAoKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFwcCk7CgogICAgX3RoaXMgPSBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIF90aGlzLl93aW5kb3dzID0ge307CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQXBwLCBbewogICAga2V5OiAibW91bnRlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgICAgdGhpcy5fd2luZG93cyA9IHt9OyAvLyBQb3B1bGF0aW5nIHRoZSBiYWNrZ3JvdW5kIGNvbnRyb2xsZXIncyB3aW5kb3cgZGljdGlvbmFyeQoKICAgICAgdGhpcy5fd2luZG93c1t3aW5kb3dOYW1lcy5kZXNrdG9wXSA9IG5ldyBPV1dpbmRvdyh3aW5kb3dOYW1lcy5kZXNrdG9wKTsKICAgICAgdGhpcy5fd2luZG93c1t3aW5kb3dOYW1lcy5pbkdhbWVdID0gbmV3IE9XV2luZG93KHdpbmRvd05hbWVzLmluR2FtZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY3JlYXRlZCIsCiAgICAvLyBXaGVuIHJ1bm5pbmcgdGhlIGFwcCwgc3RhcnQgbGlzdGVuaW5nIHRvIGdhbWVzJyBzdGF0dXMgYW5kIGRlY2lkZSB3aGljaCB3aW5kb3cgc2hvdWxkCiAgICAvLyBiZSBsYXVuY2hlZCBmaXJzdCwgYmFzZWQgb24gd2hldGhlciBGb3J0bml0ZSBpcyBjdXJyZW50bHkgcnVubmluZwogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9jcmVhdGVkID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBjdXJyV2luZG93OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIC8vIFdoZW4gYSBGb3J0bml0ZSBnYW1lIGlzIHN0YXJ0ZWQgb3IgaXMgZW5kZWQsIHRvZ2dsZSB0aGUgYXBwJ3Mgd2luZG93cwogICAgICAgICAgICAgICAgdGhpcy5fZ2FtZUxpc3RlbmVyID0gbmV3IE9XR2FtZUxpc3RlbmVyKHsKICAgICAgICAgICAgICAgICAgb25HYW1lU3RhcnRlZDogdGhpcy50b2dnbGVXaW5kb3dzLmJpbmQodGhpcyksCiAgICAgICAgICAgICAgICAgIG9uR2FtZUVuZGVkOiB0aGlzLnRvZ2dsZVdpbmRvd3MuYmluZCh0aGlzKQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgdGhpcy5fZ2FtZUxpc3RlbmVyLnN0YXJ0KCk7CgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc0xlYWd1ZVJ1bm5pbmcoKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgaWYgKCFfY29udGV4dC5zZW50KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IHdpbmRvd05hbWVzLmluR2FtZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA5OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gd2luZG93TmFtZXMuZGVza3RvcDsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgY3VycldpbmRvdyA9IF9jb250ZXh0LnQwOwoKICAgICAgICAgICAgICAgIHRoaXMuX3dpbmRvd3NbY3VycldpbmRvd10ucmVzdG9yZSgpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICAgICAgcmV0dXJuIF9jcmVhdGVkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBjcmVhdGVkOwogICAgfSgpCiAgfSwgewogICAga2V5OiAidG9nZ2xlV2luZG93cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlV2luZG93cyhpbmZvKSB7CiAgICAgIGlmICghaW5mbyB8fCAhdGhpcy5pc0dhbWVMZWFndWUoaW5mbykpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmIChpbmZvLmlzUnVubmluZykgewogICAgICAgIHRoaXMuX3dpbmRvd3Nbd2luZG93TmFtZXMuZGVza3RvcF0uY2xvc2UoKTsKCiAgICAgICAgdGhpcy5fd2luZG93c1t3aW5kb3dOYW1lcy5pbkdhbWVdLnJlc3RvcmUoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLl93aW5kb3dzW3dpbmRvd05hbWVzLmluR2FtZV0uY2xvc2UoKTsKCiAgICAgICAgdGhpcy5fd2luZG93c1t3aW5kb3dOYW1lcy5kZXNrdG9wXS5yZXN0b3JlKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc0xlYWd1ZVJ1bm5pbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9pc0xlYWd1ZVJ1bm5pbmcgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBpbmZvOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gT1dHYW1lcy5nZXRSdW5uaW5nR2FtZUluZm8oKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgaW5mbyA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIGluZm8gJiYgaW5mby5pc1J1bm5pbmcgJiYgdGhpcy5pc0dhbWVMZWFndWUoaW5mbykpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBpc0xlYWd1ZVJ1bm5pbmcoKSB7CiAgICAgICAgcmV0dXJuIF9pc0xlYWd1ZVJ1bm5pbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGlzTGVhZ3VlUnVubmluZzsKICAgIH0oKSAvLyBJZGVudGlmeSB3aGV0aGVyIHRoZSBSdW5uaW5nR2FtZUluZm8gb2JqZWN0IHdlIGhhdmUgcmVmZXJlbmNlcyBGb3J0bml0ZQoKICB9LCB7CiAgICBrZXk6ICJpc0dhbWVMZWFndWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzR2FtZUxlYWd1ZShpbmZvKSB7CiAgICAgIHJldHVybiBpbmZvLmNsYXNzSWQgPT09IGxlYWd1ZUNsYXNzSWQ7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQXBwOwp9KFZ1ZSk7CgpBcHAgPSBfX2RlY29yYXRlKFtDb21wb25lbnRdLCBBcHApOwpleHBvcnQgZGVmYXVsdCBBcHA7"},{"version":3,"sources":["C:\\Users\\Molin\\Companion\\background\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Molin\\Companion\\background\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Molin\\Companion\\background\\src\\App.vue?vue&type=script&lang=ts&"],"names":[],"mappings":";;;;;;;AAIA,SAAS,SAAT,EAAoB,GAApB,QAA+B,wBAA/B;AACA,SAAS,WAAT,EAAsB,aAAtB,QAA2C,+BAA3C;AACA,SAAS,OAAT,QAAwB,4BAAxB;AACA,SAAS,cAAT,QAA+B,oCAA/B;AACA,SAAS,QAAT,QAAyB,6BAAzB,C,CAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAqB,GAArB;AAAA;;AAAA;;AAAA,iBAAA;AAAA;;AAAA;;;AACY,UAAA,QAAA,GAAW,EAAX;AADZ;AAiDC;;AAjDD;AAAA;AAAA,8BAIW;AACH,WAAK,QAAL,GAAgB,EAAhB,CADG,CAEH;;AACA,WAAK,QAAL,CAAc,WAAW,CAAC,OAA1B,IAAqC,IAAI,QAAJ,CAAa,WAAW,CAAC,OAAzB,CAArC;AACA,WAAK,QAAL,CAAc,WAAW,CAAC,MAA1B,IAAoC,IAAI,QAAJ,CAAa,WAAW,CAAC,MAAzB,CAApC;AAEH;AAVL;AAAA;AAYI;AACA;AAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeO;AACA,qBAAK,aAAL,GAAqB,IAAI,cAAJ,CAAmB;AACpC,kBAAA,aAAa,EAAE,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CADqB;AAEpC,kBAAA,WAAW,EAAE,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB;AAFuB,iBAAnB,CAArB;;AAIC,qBAAK,aAAL,CAAmB,KAAnB;;AApBR;AAAA,uBAqBiC,KAAK,eAAL,EArBjC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,8BAqB0D,WAAW,CAAC,MArBtE;AAAA;AAAA;;AAAA;AAAA,8BAqB+E,WAAW,CAAC,OArB3F;;AAAA;AAqBc,gBAAA,UArBd;;AAsBQ,qBAAK,QAAL,CAAc,UAAd,EAA0B,OAA1B;;AAtBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kCAyB0B,IAzB1B,EAyB8B;AACtB,UAAI,CAAC,IAAD,IAAS,CAAC,KAAK,YAAL,CAAkB,IAAlB,CAAd,EAAuC;AACnC;AACH;;AAED,UAAI,IAAI,CAAC,SAAT,EAAoB;AAChB,aAAK,QAAL,CAAc,WAAW,CAAC,OAA1B,EAAmC,KAAnC;;AACA,aAAK,QAAL,CAAc,WAAW,CAAC,MAA1B,EAAkC,OAAlC;AACH,OAHD,MAGO;AACH,aAAK,QAAL,CAAc,WAAW,CAAC,MAA1B,EAAkC,KAAlC;;AACA,aAAK,QAAL,CAAc,WAAW,CAAC,OAA1B,EAAmC,OAAnC;AACH;AACJ;AArCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAwC2B,OAAO,CAAC,kBAAR,EAxC3B;;AAAA;AAwCc,gBAAA,IAxCd;AAAA,kDA0Ce,IAAI,IAAI,IAAI,CAAC,SAAb,IAA0B,KAAK,YAAL,CAAkB,IAAlB,CA1CzC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,QA6CI;;AA7CJ;AAAA;AAAA,iCA8CyB,IA9CzB,EA8C8C;AACtC,aAAO,IAAI,CAAC,OAAL,KAAiB,aAAxB;AACH;AAhDL;;AAAA;AAAA,EAAiC,GAAjC,CAAA;;AAAqB,GAAG,GAAA,UAAA,CAAA,CADvB,SACuB,CAAA,EAAH,GAAG,CAAH;eAAA,G","sourcesContent":["\n\n\n\nimport { Component, Vue } from 'vue-property-decorator';\nimport { windowNames, leagueClassId } from \"../../shared/constants/consts\";\nimport { OWGames } from '../../shared/libs/ow-games';\nimport { OWGameListener } from '../../shared/libs/ow-game-listener';\nimport { OWWindow } from '../../shared/libs/ow-window';\n// @ts-ignore\nimport RunningGameInfo = overwolf.games.RunningGameInfo;\n// The background controller holds all of the app's background logic - hence its name. it has\n// many possible use cases, for example sharing data between windows, or, in our case,\n// managing which window is currently presented to the user. To that end, it holds a dictionary\n// of the windows available in the app.\n// Our background controller implements the Singleton design pattern, since only one\n// instance of it should exist.\n@Component\nexport default class App extends Vue {\n    private _windows = {};\n    private _gameListener: OWGameListener;\n\n    mounted() {\n        this._windows = {};\n        // Populating the background controller's window dictionary\n        this._windows[windowNames.desktop] = new OWWindow(windowNames.desktop);\n        this._windows[windowNames.inGame] = new OWWindow(windowNames.inGame);\n\n    };\n\n    // When running the app, start listening to games' status and decide which window should\n    // be launched first, based on whether Fortnite is currently running\n   async created() {\n       // When a Fortnite game is started or is ended, toggle the app's windows\n       this._gameListener = new OWGameListener({\n           onGameStarted: this.toggleWindows.bind(this),\n           onGameEnded: this.toggleWindows.bind(this)\n       });\n        this._gameListener.start();\n        const currWindow = await this.isLeagueRunning() ? windowNames.inGame : windowNames.desktop;\n        this._windows[currWindow].restore();\n    }\n\n    private toggleWindows(info) {\n        if (!info || !this.isGameLeague(info)) {\n            return;\n        }\n\n        if (info.isRunning) {\n            this._windows[windowNames.desktop].close();\n            this._windows[windowNames.inGame].restore();\n        } else {\n            this._windows[windowNames.inGame].close();\n            this._windows[windowNames.desktop].restore();\n        }\n    }\n\n    private async isLeagueRunning(): Promise<boolean> {\n        const info = await OWGames.getRunningGameInfo();\n\n        return info && info.isRunning && this.isGameLeague(info);\n    }\n\n    // Identify whether the RunningGameInfo object we have references Fortnite\n    private isGameLeague(info: RunningGameInfo) {\n        return info.classId === leagueClassId;\n    }\n}\n"],"sourceRoot":""}]}